
FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d538  08006388  08006388  00007388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080238c0  080238c0  0002505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080238c0  080238c0  000248c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080238c8  080238c8  0002505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080238c8  080238c8  000248c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080238cc  080238cc  000248cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080238d0  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006260  2000005c  0802392c  0002505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200062bc  0802392c  000252bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1ba  00000000  00000000  0002508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c6  00000000  00000000  00042246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00045810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000968  00000000  00000000  000465f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b14  00000000  00000000  00046f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113fc  00000000  00000000  00068a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b0a  00000000  00000000  00079e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  0014c97a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cfc  00000000  00000000  0014ca38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00150734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003c82  00000000  00000000  00150786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001c0  00000000  00000000  00154408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006370 	.word	0x08006370

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006370 	.word	0x08006370

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a14      	ldr	r2, [pc, #80]	@ (800060c <HAL_ADC_ConvCpltCallback+0x60>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d122      	bne.n	8000604 <HAL_ADC_ConvCpltCallback+0x58>
    {
        ADC_VAL = HAL_ADC_GetValue(&hadc1);
 80005be:	4814      	ldr	r0, [pc, #80]	@ (8000610 <HAL_ADC_ConvCpltCallback+0x64>)
 80005c0:	f001 f848 	bl	8001654 <HAL_ADC_GetValue>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <HAL_ADC_ConvCpltCallback+0x68>)
 80005c8:	6013      	str	r3, [r2, #0]

        if (sample_index < FFT_SIZE)
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <HAL_ADC_ConvCpltCallback+0x6c>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80005d4:	d216      	bcs.n	8000604 <HAL_ADC_ConvCpltCallback+0x58>
        {
            adc_samples[sample_index++] = ADC_VAL;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_ADC_ConvCpltCallback+0x68>)
 80005d8:	6819      	ldr	r1, [r3, #0]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_ADC_ConvCpltCallback+0x6c>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	b290      	uxth	r0, r2
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <HAL_ADC_ConvCpltCallback+0x6c>)
 80005e6:	8010      	strh	r0, [r2, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	b289      	uxth	r1, r1
 80005ec:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <HAL_ADC_ConvCpltCallback+0x70>)
 80005ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

            if (sample_index >= FFT_SIZE)
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <HAL_ADC_ConvCpltCallback+0x6c>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80005fc:	d302      	bcc.n	8000604 <HAL_ADC_ConvCpltCallback+0x58>
            {
                fft_ready = 1; // Signal to perform FFT
 80005fe:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <HAL_ADC_ConvCpltCallback+0x74>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	50040000 	.word	0x50040000
 8000610:	20000078 	.word	0x20000078
 8000614:	20006168 	.word	0x20006168
 8000618:	20006164 	.word	0x20006164
 800061c:	20000164 	.word	0x20000164
 8000620:	20006166 	.word	0x20006166

08000624 <send_uart>:

void send_uart(const char *msg)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fdcf 	bl	80001d0 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <send_uart+0x28>)
 800063e:	f003 fadf 	bl	8003c00 <HAL_UART_Transmit>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000dc 	.word	0x200000dc

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0a8      	sub	sp, #160	@ 0xa0
 8000654:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fbb8 	bl	8000dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f8db 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f9bf 	bl	80009e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000662:	f000 f929 	bl	80008b8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000666:	f000 f98b 	bl	8000980 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800066a:	485d      	ldr	r0, [pc, #372]	@ (80007e0 <main+0x190>)
 800066c:	f000 ff3e 	bl	80014ec <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (fft_ready)
 8000670:	4b5c      	ldr	r3, [pc, #368]	@ (80007e4 <main+0x194>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0fa      	beq.n	8000670 <main+0x20>
      {
          // 1. Copy ADC samples to float array
          for (uint16_t i = 0; i < FFT_SIZE; i++)
 800067a:	2300      	movs	r3, #0
 800067c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 8000680:	e014      	b.n	80006ac <main+0x5c>
          {
              adc_input_f32[i] = (float32_t)adc_samples[i];
 8000682:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000686:	4a58      	ldr	r2, [pc, #352]	@ (80007e8 <main+0x198>)
 8000688:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800068c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000690:	ee07 2a90 	vmov	s15, r2
 8000694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000698:	4a54      	ldr	r2, [pc, #336]	@ (80007ec <main+0x19c>)
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	edc3 7a00 	vstr	s15, [r3]
          for (uint16_t i = 0; i < FFT_SIZE; i++)
 80006a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80006a6:	3301      	adds	r3, #1
 80006a8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 80006ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80006b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006b4:	d3e5      	bcc.n	8000682 <main+0x32>
          }

          // 2. Perform FFT
          arm_rfft_fast_instance_f32 fft_instance;
          arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE);
 80006b6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 f878 	bl	80047b4 <arm_rfft_fast_init_f32>
          arm_rfft_fast_f32(&fft_instance, adc_input_f32, fft_output, 0);
 80006c4:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80006c8:	2300      	movs	r3, #0
 80006ca:	4a49      	ldr	r2, [pc, #292]	@ (80007f0 <main+0x1a0>)
 80006cc:	4947      	ldr	r1, [pc, #284]	@ (80007ec <main+0x19c>)
 80006ce:	f004 f95b 	bl	8004988 <arm_rfft_fast_f32>

          // 3. Compute magnitude of complex FFT output (real and imaginary parts)
          arm_cmplx_mag_f32(fft_output, fft_magnitude, FFT_SIZE / 2);
 80006d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006d6:	4947      	ldr	r1, [pc, #284]	@ (80007f4 <main+0x1a4>)
 80006d8:	4845      	ldr	r0, [pc, #276]	@ (80007f0 <main+0x1a0>)
 80006da:	f004 fd31 	bl	8005140 <arm_cmplx_mag_f32>

          // 4. Remove DC component (set the first bin to zero)
          fft_magnitude[0] = 0;
 80006de:	4b45      	ldr	r3, [pc, #276]	@ (80007f4 <main+0x1a4>)
 80006e0:	f04f 0200 	mov.w	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]

          // 5. Find the maximum magnitude and corresponding bin
          float32_t max_magnitude = 0;
 80006e6:	f04f 0300 	mov.w	r3, #0
 80006ea:	66bb      	str	r3, [r7, #104]	@ 0x68
          uint16_t max_bin = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

          // Use arm_max_f32 to find the maximum magnitude and its corresponding bin
          arm_max_f32(fft_magnitude, FFT_SIZE / 2, &max_magnitude, &max_bin);
 80006f2:	f107 0366 	add.w	r3, r7, #102	@ 0x66
 80006f6:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80006fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006fe:	483d      	ldr	r0, [pc, #244]	@ (80007f4 <main+0x1a4>)
 8000700:	f003 ff50 	bl	80045a4 <arm_max_f32>

          // 6. Calculate the corresponding frequency
          float fs = 33333.0f;  // Sampling frequency (adjust if needed)
 8000704:	4b3c      	ldr	r3, [pc, #240]	@ (80007f8 <main+0x1a8>)
 8000706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
          float frequency = (max_bin * fs) / FFT_SIZE;
 800070a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800070e:	ee07 3a90 	vmov	s15, r3
 8000712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000716:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800071a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800071e:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80007fc <main+0x1ac>
 8000722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000726:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c

          // 7. Cast frequency and magnitude to integers for UART transmission
          int int_frequency = (int)frequency;  // Integer approximation of frequency
 800072a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800072e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000732:	ee17 3a90 	vmov	r3, s15
 8000736:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          int int_magnitude = (int)(max_magnitude);  // Integer approximation of magnitude
 800073a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800073e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000742:	ee17 3a90 	vmov	r3, s15
 8000746:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
//              char msg[100];
//              snprintf(msg, sizeof(msg), "Max Freq: %d Hz, Magnitude: %d\r\n", int_frequency, int_magnitude);
//              send_uart(msg);
//          }

          if (int_frequency > 146 & int_magnitude < 86000){
 800074a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800074e:	2b92      	cmp	r3, #146	@ 0x92
 8000750:	bfcc      	ite	gt
 8000752:	2301      	movgt	r3, #1
 8000754:	2300      	movle	r3, #0
 8000756:	b2da      	uxtb	r2, r3
 8000758:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800075c:	4928      	ldr	r1, [pc, #160]	@ (8000800 <main+0x1b0>)
 800075e:	428b      	cmp	r3, r1
 8000760:	bfd4      	ite	le
 8000762:	2301      	movle	r3, #1
 8000764:	2300      	movgt	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4013      	ands	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d00e      	beq.n	800078e <main+0x13e>
				char msg[100];
				snprintf(msg, sizeof(msg), "Coin, Max Freq: %d Hz, Magnitude: %d\r\n", int_frequency, int_magnitude);
 8000770:	4638      	mov	r0, r7
 8000772:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800077c:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <main+0x1b4>)
 800077e:	2164      	movs	r1, #100	@ 0x64
 8000780:	f005 f920 	bl	80059c4 <sniprintf>
				send_uart(msg);
 8000784:	463b      	mov	r3, r7
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff4c 	bl	8000624 <send_uart>
 800078c:	e020      	b.n	80007d0 <main+0x180>
          }
          else if(int_frequency < 146 & int_magnitude > 86000){
 800078e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000792:	2b91      	cmp	r3, #145	@ 0x91
 8000794:	bfd4      	ite	le
 8000796:	2301      	movle	r3, #1
 8000798:	2300      	movgt	r3, #0
 800079a:	b2da      	uxtb	r2, r3
 800079c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007a0:	4919      	ldr	r1, [pc, #100]	@ (8000808 <main+0x1b8>)
 80007a2:	428b      	cmp	r3, r1
 80007a4:	bfcc      	ite	gt
 80007a6:	2301      	movgt	r3, #1
 80007a8:	2300      	movle	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00d      	beq.n	80007d0 <main+0x180>
				char msg[100];
				snprintf(msg, sizeof(msg), "Eraser, Max Freq: %d Hz, Magnitude: %d\r\n", int_frequency, int_magnitude);
 80007b4:	4638      	mov	r0, r7
 80007b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80007c0:	4a12      	ldr	r2, [pc, #72]	@ (800080c <main+0x1bc>)
 80007c2:	2164      	movs	r1, #100	@ 0x64
 80007c4:	f005 f8fe 	bl	80059c4 <sniprintf>
				send_uart(msg);
 80007c8:	463b      	mov	r3, r7
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff2a 	bl	8000624 <send_uart>
          }
          // 9. Reset after processing
          sample_index = 0;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <main+0x1c0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	801a      	strh	r2, [r3, #0]
          fft_ready = 0;
 80007d6:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <main+0x194>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
      if (fft_ready)
 80007dc:	e748      	b.n	8000670 <main+0x20>
 80007de:	bf00      	nop
 80007e0:	20000078 	.word	0x20000078
 80007e4:	20006166 	.word	0x20006166
 80007e8:	20000164 	.word	0x20000164
 80007ec:	20001164 	.word	0x20001164
 80007f0:	20003164 	.word	0x20003164
 80007f4:	20005164 	.word	0x20005164
 80007f8:	47023500 	.word	0x47023500
 80007fc:	45000000 	.word	0x45000000
 8000800:	00014fef 	.word	0x00014fef
 8000804:	08006388 	.word	0x08006388
 8000808:	00014ff0 	.word	0x00014ff0
 800080c:	080063b0 	.word	0x080063b0
 8000810:	20006164 	.word	0x20006164

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b096      	sub	sp, #88	@ 0x58
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2244      	movs	r2, #68	@ 0x44
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 f904 	bl	8005a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000836:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800083a:	f002 f81d 	bl	8002878 <HAL_PWREx_ControlVoltageScaling>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000844:	f000 f916 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000848:	2310      	movs	r3, #16
 800084a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000854:	2360      	movs	r3, #96	@ 0x60
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000858:	2302      	movs	r3, #2
 800085a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800085c:	2301      	movs	r3, #1
 800085e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000864:	2310      	movs	r3, #16
 8000866:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000868:	2307      	movs	r3, #7
 800086a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f853 	bl	8002924 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000884:	f000 f8f6 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2303      	movs	r3, #3
 800088e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	2101      	movs	r1, #1
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fc53 	bl	800314c <HAL_RCC_ClockConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008ac:	f000 f8e2 	bl	8000a74 <Error_Handler>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ce:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <MX_ADC1_Init+0xbc>)
 80008d0:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <MX_ADC1_Init+0xc0>)
 80008d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80008d4:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_ADC1_Init+0xbc>)
 80008d6:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 80008da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <MX_ADC1_Init+0xbc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <MX_ADC1_Init+0xbc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <MX_ADC1_Init+0xbc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <MX_ADC1_Init+0xbc>)
 80008f0:	2204      	movs	r2, #4
 80008f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_ADC1_Init+0xbc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <MX_ADC1_Init+0xbc>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000900:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <MX_ADC1_Init+0xbc>)
 8000902:	2201      	movs	r2, #1
 8000904:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000906:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <MX_ADC1_Init+0xbc>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_ADC1_Init+0xbc>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_ADC1_Init+0xbc>)
 8000916:	2200      	movs	r2, #0
 8000918:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_ADC1_Init+0xbc>)
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000922:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_ADC1_Init+0xbc>)
 8000924:	2200      	movs	r2, #0
 8000926:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <MX_ADC1_Init+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000930:	4810      	ldr	r0, [pc, #64]	@ (8000974 <MX_ADC1_Init+0xbc>)
 8000932:	f000 fc99 	bl	8001268 <HAL_ADC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800093c:	f000 f89a 	bl	8000a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000940:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <MX_ADC1_Init+0xc4>)
 8000942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000944:	2306      	movs	r3, #6
 8000946:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800094c:	237f      	movs	r3, #127	@ 0x7f
 800094e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000950:	2304      	movs	r3, #4
 8000952:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_ADC1_Init+0xbc>)
 800095e:	f001 f84f 	bl	8001a00 <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000968:	f000 f884 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000078 	.word	0x20000078
 8000978:	50040000 	.word	0x50040000
 800097c:	14f00020 	.word	0x14f00020

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 8000986:	4a15      	ldr	r2, [pc, #84]	@ (80009dc <MX_USART2_UART_Init+0x5c>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009c4:	f003 f8ce 	bl	8003b64 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f851 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000dc 	.word	0x200000dc
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_GPIO_Init+0x8c>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <MX_GPIO_Init+0x8c>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_GPIO_Init+0x8c>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_GPIO_Init+0x8c>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <MX_GPIO_Init+0x8c>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_GPIO_Init+0x8c>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_GPIO_Init+0x8c>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <MX_GPIO_Init+0x8c>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_GPIO_Init+0x8c>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2108      	movs	r1, #8
 8000a42:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <MX_GPIO_Init+0x90>)
 8000a44:	f001 fef2 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <MX_GPIO_Init+0x90>)
 8000a60:	f001 fd7a 	bl	8002558 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000400 	.word	0x48000400

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09e      	sub	sp, #120	@ 0x78
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	2254      	movs	r2, #84	@ 0x54
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 ffa1 	bl	8005a30 <memset>
  if(hadc->Instance==ADC1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a29      	ldr	r2, [pc, #164]	@ (8000b98 <HAL_ADC_MspInit+0xd0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d14b      	bne.n	8000b90 <HAL_ADC_MspInit+0xc8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000af8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000afc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000afe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b02:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b10:	2307      	movs	r3, #7
 8000b12:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 fd34 	bl	8003594 <HAL_RCCEx_PeriphCLKConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b32:	f7ff ff9f 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_ADC_MspInit+0xd4>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4a18      	ldr	r2, [pc, #96]	@ (8000b9c <HAL_ADC_MspInit+0xd4>)
 8000b3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_ADC_MspInit+0xd4>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <HAL_ADC_MspInit+0xd4>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <HAL_ADC_MspInit+0xd4>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <HAL_ADC_MspInit+0xd4>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b66:	2301      	movs	r3, #1
 8000b68:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7c:	f001 fcec 	bl	8002558 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2012      	movs	r0, #18
 8000b86:	f001 fcb0 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b8a:	2012      	movs	r0, #18
 8000b8c:	f001 fcc9 	bl	8002522 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b90:	bf00      	nop
 8000b92:	3778      	adds	r7, #120	@ 0x78
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	50040000 	.word	0x50040000
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09e      	sub	sp, #120	@ 0x78
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	2254      	movs	r2, #84	@ 0x54
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 ff35 	bl	8005a30 <memset>
  if(huart->Instance==USART2)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a28      	ldr	r2, [pc, #160]	@ (8000c6c <HAL_UART_MspInit+0xcc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d148      	bne.n	8000c62 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fcd9 	bl	8003594 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be8:	f7ff ff44 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bec:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <HAL_UART_MspInit+0xd0>)
 8000bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c70 <HAL_UART_MspInit+0xd0>)
 8000bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <HAL_UART_MspInit+0xd0>)
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <HAL_UART_MspInit+0xd0>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c08:	4a19      	ldr	r2, [pc, #100]	@ (8000c70 <HAL_UART_MspInit+0xd0>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c10:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_UART_MspInit+0xd0>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3a:	f001 fc8d 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c42:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c50:	2303      	movs	r3, #3
 8000c52:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5e:	f001 fc7b 	bl	8002558 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c62:	bf00      	nop
 8000c64:	3778      	adds	r7, #120	@ 0x78
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40004400 	.word	0x40004400
 8000c70:	40021000 	.word	0x40021000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 f8d3 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <ADC1_IRQHandler+0x10>)
 8000cda:	f000 fcc8 	bl	800166e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000078 	.word	0x20000078

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	@ (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f004 fe92 	bl	8005a40 <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	@ (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000c000 	.word	0x2000c000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	2000616c 	.word	0x2000616c
 8000d50:	200062c0 	.word	0x200062c0

08000d54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff ffea 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	@ (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f004 fe51 	bl	8005a4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000daa:	f7ff fc51 	bl	8000650 <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dbc:	080238d0 	.word	0x080238d0
  ldr r2, =_sbss
 8000dc0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dc4:	200062bc 	.word	0x200062bc

08000dc8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <CAN1_RX0_IRQHandler>

08000dca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f001 fb7d 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f80e 	bl	8000dfc <HAL_InitTick>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	e001      	b.n	8000df0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dec:	f7ff fe48 	bl	8000a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e08:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <HAL_InitTick+0x6c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d023      	beq.n	8000e58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e10:	4b16      	ldr	r3, [pc, #88]	@ (8000e6c <HAL_InitTick+0x70>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <HAL_InitTick+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fb89 	bl	800253e <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10f      	bne.n	8000e52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d809      	bhi.n	8000e4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f001 fb53 	bl	80024ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e44:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <HAL_InitTick+0x74>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e007      	b.n	8000e5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e004      	b.n	8000e5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e001      	b.n	8000e5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20006170 	.word	0x20006170

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20006170 	.word	0x20006170

08000eb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3360      	adds	r3, #96	@ 0x60
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <LL_ADC_SetOffset+0x44>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f54:	bf00      	nop
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	03fff000 	.word	0x03fff000

08000f64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3360      	adds	r3, #96	@ 0x60
 8000f72:	461a      	mov	r2, r3
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3360      	adds	r3, #96	@ 0x60
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fba:	bf00      	nop
 8000fbc:	371c      	adds	r7, #28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3330      	adds	r3, #48	@ 0x30
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	4413      	add	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	211f      	movs	r1, #31
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	401a      	ands	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	0e9b      	lsrs	r3, r3, #26
 8001024:	f003 011f 	and.w	r1, r3, #31
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	431a      	orrs	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001038:	bf00      	nop
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800106a:	b480      	push	{r7}
 800106c:	b087      	sub	sp, #28
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3314      	adds	r3, #20
 800107a:	461a      	mov	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	0e5b      	lsrs	r3, r3, #25
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	4413      	add	r3, r2
 8001088:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	0d1b      	lsrs	r3, r3, #20
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	2107      	movs	r1, #7
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	0d1b      	lsrs	r3, r3, #20
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	431a      	orrs	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010b4:	bf00      	nop
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d8:	43db      	mvns	r3, r3
 80010da:	401a      	ands	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0318 	and.w	r3, r3, #24
 80010e2:	4908      	ldr	r1, [pc, #32]	@ (8001104 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010e4:	40d9      	lsrs	r1, r3
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	400b      	ands	r3, r1
 80010ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ee:	431a      	orrs	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	0007ffff 	.word	0x0007ffff

08001108 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001118:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6093      	str	r3, [r2, #8]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800113c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001140:	d101      	bne.n	8001146 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001164:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001168:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001190:	d101      	bne.n	8001196 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <LL_ADC_IsEnabled+0x18>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <LL_ADC_IsEnabled+0x1a>
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001202:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001206:	f043 0204 	orr.w	r2, r3, #4
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b04      	cmp	r3, #4
 800122c:	d101      	bne.n	8001232 <LL_ADC_REG_IsConversionOngoing+0x18>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b08      	cmp	r3, #8
 8001252:	d101      	bne.n	8001258 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e126      	b.n	80014d0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800128c:	2b00      	cmp	r3, #0
 800128e:	d109      	bne.n	80012a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fc19 	bl	8000ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff3f 	bl	800112c <LL_ADC_IsDeepPowerDownEnabled>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff25 	bl	8001108 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff5a 	bl	800117c <LL_ADC_IsInternalRegulatorEnabled>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d115      	bne.n	80012fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff3e 	bl	8001154 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012d8:	4b7f      	ldr	r3, [pc, #508]	@ (80014d8 <HAL_ADC_Init+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	099b      	lsrs	r3, r3, #6
 80012de:	4a7f      	ldr	r2, [pc, #508]	@ (80014dc <HAL_ADC_Init+0x274>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	3301      	adds	r3, #1
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012ec:	e002      	b.n	80012f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff3c 	bl	800117c <LL_ADC_IsInternalRegulatorEnabled>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10d      	bne.n	8001326 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800130e:	f043 0210 	orr.w	r2, r3, #16
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	f043 0201 	orr.w	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff75 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 8001330:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 80bf 	bne.w	80014be <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 80bb 	bne.w	80014be <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800134c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001350:	f043 0202 	orr.w	r2, r3, #2
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff35 	bl	80011cc <LL_ADC_IsEnabled>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10b      	bne.n	8001380 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001368:	485d      	ldr	r0, [pc, #372]	@ (80014e0 <HAL_ADC_Init+0x278>)
 800136a:	f7ff ff2f 	bl	80011cc <LL_ADC_IsEnabled>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d105      	bne.n	8001380 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4619      	mov	r1, r3
 800137a:	485a      	ldr	r0, [pc, #360]	@ (80014e4 <HAL_ADC_Init+0x27c>)
 800137c:	f7ff fd9a 	bl	8000eb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e5b      	ldrb	r3, [r3, #25]
 8001384:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800138a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001390:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001396:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d106      	bne.n	80013bc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	3b01      	subs	r3, #1
 80013b4:	045b      	lsls	r3, r3, #17
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d009      	beq.n	80013d8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	4b42      	ldr	r3, [pc, #264]	@ (80014e8 <HAL_ADC_Init+0x280>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff25 	bl	8001240 <LL_ADC_INJ_IsConversionOngoing>
 80013f6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d13d      	bne.n	800147a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d13a      	bne.n	800147a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001408:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001410:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001420:	f023 0302 	bic.w	r3, r3, #2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	69b9      	ldr	r1, [r7, #24]
 800142a:	430b      	orrs	r3, r1
 800142c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001434:	2b01      	cmp	r3, #1
 8001436:	d118      	bne.n	800146a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800144e:	4311      	orrs	r1, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001454:	4311      	orrs	r1, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800145a:	430a      	orrs	r2, r1
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	e007      	b.n	800147a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10c      	bne.n	800149c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001488:	f023 010f 	bic.w	r1, r3, #15
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	1e5a      	subs	r2, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	631a      	str	r2, [r3, #48]	@ 0x30
 800149a:	e007      	b.n	80014ac <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 020f 	bic.w	r2, r2, #15
 80014aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b0:	f023 0303 	bic.w	r3, r3, #3
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80014bc:	e007      	b.n	80014ce <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c2:	f043 0210 	orr.w	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	053e2d63 	.word	0x053e2d63
 80014e0:	50040000 	.word	0x50040000
 80014e4:	50040300 	.word	0x50040300
 80014e8:	fff0c007 	.word	0xfff0c007

080014ec <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fe8e 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	f040 80a0 	bne.w	8001646 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_ADC_Start_IT+0x28>
 8001510:	2302      	movs	r3, #2
 8001512:	e09b      	b.n	800164c <HAL_ADC_Start_IT+0x160>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 fe51 	bl	80021c4 <ADC_Enable>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 8087 	bne.w	800163c <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001532:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001546:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d006      	beq.n	800155c <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	f023 0206 	bic.w	r2, r3, #6
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	659a      	str	r2, [r3, #88]	@ 0x58
 800155a:	e002      	b.n	8001562 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	221c      	movs	r2, #28
 8001568:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 021c 	bic.w	r2, r2, #28
 8001580:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b08      	cmp	r3, #8
 8001588:	d108      	bne.n	800159c <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0208 	orr.w	r2, r2, #8
 8001598:	605a      	str	r2, [r3, #4]
          break;
 800159a:	e008      	b.n	80015ae <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0204 	orr.w	r2, r2, #4
 80015aa:	605a      	str	r2, [r3, #4]
          break;
 80015ac:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d107      	bne.n	80015c6 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0210 	orr.w	r2, r2, #16
 80015c4:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d02d      	beq.n	8001630 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d110      	bne.n	800160e <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0220 	bic.w	r2, r2, #32
 80015fa:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800160a:	605a      	str	r2, [r3, #4]
            break;
 800160c:	e010      	b.n	8001630 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800161c:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	605a      	str	r2, [r3, #4]
            break;
 800162e:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fddc 	bl	80011f2 <LL_ADC_REG_StartConversion>
 800163a:	e006      	b.n	800164a <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001644:	e001      	b.n	800164a <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001646:	2302      	movs	r3, #2
 8001648:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b088      	sub	sp, #32
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d017      	beq.n	80016c4 <HAL_ADC_IRQHandler+0x56>
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d012      	beq.n	80016c4 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d105      	bne.n	80016b6 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ae:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fe32 	bl	8002320 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2202      	movs	r2, #2
 80016c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d004      	beq.n	80016d8 <HAL_ADC_IRQHandler+0x6a>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d05e      	beq.n	80017a0 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d059      	beq.n	80017a0 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fc5c 	bl	8000fc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d03e      	beq.n	8001792 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d135      	bne.n	8001792 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b08      	cmp	r3, #8
 8001732:	d12e      	bne.n	8001792 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fd6e 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d11a      	bne.n	800177a <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 020c 	bic.w	r2, r2, #12
 8001752:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001758:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001764:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d112      	bne.n	8001792 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	655a      	str	r2, [r3, #84]	@ 0x54
 8001778:	e00b      	b.n	8001792 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800177e:	f043 0210 	orr.w	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7fe ff0a 	bl	80005ac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	220c      	movs	r2, #12
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f003 0320 	and.w	r3, r3, #32
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_ADC_IRQHandler+0x146>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0320 	and.w	r3, r3, #32
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d072      	beq.n	80018a4 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d06d      	beq.n	80018a4 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc2d 	bl	8001044 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80017ea:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fbe8 	bl	8000fc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017f6:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d047      	beq.n	8001896 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <HAL_ADC_IRQHandler+0x1b2>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d03f      	beq.n	8001896 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800181c:	2b00      	cmp	r3, #0
 800181e:	d13a      	bne.n	8001896 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800182a:	2b40      	cmp	r3, #64	@ 0x40
 800182c:	d133      	bne.n	8001896 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d12e      	bne.n	8001896 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fcff 	bl	8001240 <LL_ADC_INJ_IsConversionOngoing>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d11a      	bne.n	800187e <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001856:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d112      	bne.n	8001896 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001874:	f043 0201 	orr.w	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	655a      	str	r2, [r3, #84]	@ 0x54
 800187c:	e00b      	b.n	8001896 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001882:	f043 0210 	orr.w	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	f043 0201 	orr.w	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fd1a 	bl	80022d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2260      	movs	r2, #96	@ 0x60
 80018a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d011      	beq.n	80018d2 <HAL_ADC_IRQHandler+0x264>
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00c      	beq.n	80018d2 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f886 	bl	80019d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2280      	movs	r2, #128	@ 0x80
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d012      	beq.n	8001902 <HAL_ADC_IRQHandler+0x294>
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00d      	beq.n	8001902 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fd00 	bl	80022f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001908:	2b00      	cmp	r3, #0
 800190a:	d012      	beq.n	8001932 <HAL_ADC_IRQHandler+0x2c4>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fcf2 	bl	800230c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d02a      	beq.n	8001992 <HAL_ADC_IRQHandler+0x324>
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	d025      	beq.n	8001992 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800194e:	2301      	movs	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e008      	b.n	8001966 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001962:	2301      	movs	r3, #1
 8001964:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d10e      	bne.n	800198a <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001970:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197c:	f043 0202 	orr.w	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f830 	bl	80019ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2210      	movs	r2, #16
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d018      	beq.n	80019ce <HAL_ADC_IRQHandler+0x360>
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d013      	beq.n	80019ce <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b6:	f043 0208 	orr.w	r2, r3, #8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fc8b 	bl	80022e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0b6      	sub	sp, #216	@ 0xd8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x22>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e3bb      	b.n	800219a <HAL_ADC_ConfigChannel+0x79a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fbf3 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 83a0 	bne.w	800217c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d824      	bhi.n	8001a96 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	3b02      	subs	r3, #2
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d81b      	bhi.n	8001a8e <HAL_ADC_ConfigChannel+0x8e>
 8001a56:	a201      	add	r2, pc, #4	@ (adr r2, 8001a5c <HAL_ADC_ConfigChannel+0x5c>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a6d 	.word	0x08001a6d
 8001a60:	08001a75 	.word	0x08001a75
 8001a64:	08001a7d 	.word	0x08001a7d
 8001a68:	08001a85 	.word	0x08001a85
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a72:	e010      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001a74:	2312      	movs	r3, #18
 8001a76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a7a:	e00c      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001a7c:	2318      	movs	r3, #24
 8001a7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a82:	e008      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a8c:	e003      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a8e:	2306      	movs	r3, #6
 8001a90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a94:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001aa4:	f7ff faa2 	bl	8000fec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fbb4 	bl	800121a <LL_ADC_REG_IsConversionOngoing>
 8001ab2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fbc0 	bl	8001240 <LL_ADC_INJ_IsConversionOngoing>
 8001ac0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 81a4 	bne.w	8001e16 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 819f 	bne.w	8001e16 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f7ff fac0 	bl	800106a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d00a      	beq.n	8001b22 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6919      	ldr	r1, [r3, #16]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b1c:	f7ff f9fe 	bl	8000f1c <LL_ADC_SetOffset>
 8001b20:	e179      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fa1b 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x14e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fa10 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	0e9b      	lsrs	r3, r3, #26
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	e01e      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x18c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fa05 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001b7c:	2320      	movs	r3, #32
 8001b7e:	e004      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1a4>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	e018      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x1d6>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001bb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001bc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	e004      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d106      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f9d4 	bl	8000f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2101      	movs	r1, #1
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f9b8 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x214>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2101      	movs	r1, #1
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f9ad 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	0e9b      	lsrs	r3, r3, #26
 8001c0e:	f003 021f 	and.w	r2, r3, #31
 8001c12:	e01e      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x252>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f9a2 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001c32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001c42:	2320      	movs	r3, #32
 8001c44:	e004      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001c46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x26a>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0e9b      	lsrs	r3, r3, #26
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	e018      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x29c>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e004      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001c92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d106      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f971 	bl	8000f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f955 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x2da>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2102      	movs	r1, #2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f94a 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	0e9b      	lsrs	r3, r3, #26
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	e01e      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x318>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f93f 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001d08:	2320      	movs	r3, #32
 8001d0a:	e004      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x330>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0e9b      	lsrs	r3, r3, #26
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	e014      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x35a>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001d3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	e004      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d106      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	2102      	movs	r1, #2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f912 	bl	8000f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2103      	movs	r1, #3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff f8f6 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10a      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x398>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2103      	movs	r1, #3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f8eb 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	0e9b      	lsrs	r3, r3, #26
 8001d92:	f003 021f 	and.w	r2, r3, #31
 8001d96:	e017      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x3c8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f8e0 	bl	8000f64 <LL_ADC_GetOffsetChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001db2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001db4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001dba:	2320      	movs	r3, #32
 8001dbc:	e003      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x3e0>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0e9b      	lsrs	r3, r3, #26
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	e011      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x404>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001df0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001df2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e003      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001dfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d106      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2103      	movs	r1, #3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f8bd 	bl	8000f90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f9d6 	bl	80011cc <LL_ADC_IsEnabled>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8140 	bne.w	80020a8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	461a      	mov	r2, r3
 8001e36:	f7ff f943 	bl	80010c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4a8f      	ldr	r2, [pc, #572]	@ (800207c <HAL_ADC_ConfigChannel+0x67c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	f040 8131 	bne.w	80020a8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10b      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x46e>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	0e9b      	lsrs	r3, r3, #26
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	2b09      	cmp	r3, #9
 8001e64:	bf94      	ite	ls
 8001e66:	2301      	movls	r3, #1
 8001e68:	2300      	movhi	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	e019      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x4a2>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001e80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001e86:	2320      	movs	r3, #32
 8001e88:	e003      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001e8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	bf94      	ite	ls
 8001e9c:	2301      	movls	r3, #1
 8001e9e:	2300      	movhi	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d079      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d107      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x4c2>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0e9b      	lsrs	r3, r3, #26
 8001eb8:	3301      	adds	r3, #1
 8001eba:	069b      	lsls	r3, r3, #26
 8001ebc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ec0:	e015      	b.n	8001eee <HAL_ADC_ConfigChannel+0x4ee>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ed2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001ed4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e003      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	069b      	lsls	r3, r3, #26
 8001eea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x50e>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	0e9b      	lsrs	r3, r3, #26
 8001f00:	3301      	adds	r3, #1
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	2101      	movs	r1, #1
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	e017      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x53e>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f1e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001f26:	2320      	movs	r3, #32
 8001f28:	e003      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	ea42 0103 	orr.w	r1, r2, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10a      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x564>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	3301      	adds	r3, #1
 8001f56:	f003 021f 	and.w	r2, r3, #31
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	051b      	lsls	r3, r3, #20
 8001f62:	e018      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x596>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f74:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	e003      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f003 021f 	and.w	r2, r3, #31
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f96:	430b      	orrs	r3, r1
 8001f98:	e081      	b.n	800209e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d107      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x5b6>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0e9b      	lsrs	r3, r3, #26
 8001fac:	3301      	adds	r3, #1
 8001fae:	069b      	lsls	r3, r3, #26
 8001fb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fb4:	e015      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x5e2>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	e003      	b.n	8001fda <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	069b      	lsls	r3, r3, #26
 8001fde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x602>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0e9b      	lsrs	r3, r3, #26
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	e017      	b.n	8002032 <HAL_ADC_ConfigChannel+0x632>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	61bb      	str	r3, [r7, #24]
  return result;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e003      	b.n	8002026 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2101      	movs	r1, #1
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	ea42 0103 	orr.w	r1, r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10d      	bne.n	800205e <HAL_ADC_ConfigChannel+0x65e>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	3301      	adds	r3, #1
 800204a:	f003 021f 	and.w	r2, r3, #31
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	3b1e      	subs	r3, #30
 8002056:	051b      	lsls	r3, r3, #20
 8002058:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800205c:	e01e      	b.n	800209c <HAL_ADC_ConfigChannel+0x69c>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	60fb      	str	r3, [r7, #12]
  return result;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d104      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002076:	2320      	movs	r3, #32
 8002078:	e006      	b.n	8002088 <HAL_ADC_ConfigChannel+0x688>
 800207a:	bf00      	nop
 800207c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	3301      	adds	r3, #1
 800208a:	f003 021f 	and.w	r2, r3, #31
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	3b1e      	subs	r3, #30
 8002096:	051b      	lsls	r3, r3, #20
 8002098:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800209c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a2:	4619      	mov	r1, r3
 80020a4:	f7fe ffe1 	bl	800106a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b3d      	ldr	r3, [pc, #244]	@ (80021a4 <HAL_ADC_ConfigChannel+0x7a4>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d06c      	beq.n	800218e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b4:	483c      	ldr	r0, [pc, #240]	@ (80021a8 <HAL_ADC_ConfigChannel+0x7a8>)
 80020b6:	f7fe ff23 	bl	8000f00 <LL_ADC_GetCommonPathInternalCh>
 80020ba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a3a      	ldr	r2, [pc, #232]	@ (80021ac <HAL_ADC_ConfigChannel+0x7ac>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d127      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d121      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a35      	ldr	r2, [pc, #212]	@ (80021b0 <HAL_ADC_ConfigChannel+0x7b0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d157      	bne.n	800218e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020e6:	4619      	mov	r1, r3
 80020e8:	482f      	ldr	r0, [pc, #188]	@ (80021a8 <HAL_ADC_ConfigChannel+0x7a8>)
 80020ea:	f7fe fef6 	bl	8000eda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020ee:	4b31      	ldr	r3, [pc, #196]	@ (80021b4 <HAL_ADC_ConfigChannel+0x7b4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	4a30      	ldr	r2, [pc, #192]	@ (80021b8 <HAL_ADC_ConfigChannel+0x7b8>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002108:	e002      	b.n	8002110 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3b01      	subs	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f9      	bne.n	800210a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002116:	e03a      	b.n	800218e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <HAL_ADC_ConfigChannel+0x7bc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d113      	bne.n	800214a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002126:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10d      	bne.n	800214a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1f      	ldr	r2, [pc, #124]	@ (80021b0 <HAL_ADC_ConfigChannel+0x7b0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d12a      	bne.n	800218e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800213c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002140:	4619      	mov	r1, r3
 8002142:	4819      	ldr	r0, [pc, #100]	@ (80021a8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002144:	f7fe fec9 	bl	8000eda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002148:	e021      	b.n	800218e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1c      	ldr	r2, [pc, #112]	@ (80021c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d11c      	bne.n	800218e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002154:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002158:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d116      	bne.n	800218e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a12      	ldr	r2, [pc, #72]	@ (80021b0 <HAL_ADC_ConfigChannel+0x7b0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d111      	bne.n	800218e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800216a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800216e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002172:	4619      	mov	r1, r3
 8002174:	480c      	ldr	r0, [pc, #48]	@ (80021a8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002176:	f7fe feb0 	bl	8000eda <LL_ADC_SetCommonPathInternalCh>
 800217a:	e008      	b.n	800218e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002196:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800219a:	4618      	mov	r0, r3
 800219c:	37d8      	adds	r7, #216	@ 0xd8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	80080000 	.word	0x80080000
 80021a8:	50040300 	.word	0x50040300
 80021ac:	c7520000 	.word	0xc7520000
 80021b0:	50040000 	.word	0x50040000
 80021b4:	20000000 	.word	0x20000000
 80021b8:	053e2d63 	.word	0x053e2d63
 80021bc:	cb840000 	.word	0xcb840000
 80021c0:	80000001 	.word	0x80000001

080021c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fff9 	bl	80011cc <LL_ADC_IsEnabled>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d169      	bne.n	80022b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	4b36      	ldr	r3, [pc, #216]	@ (80022c0 <ADC_Enable+0xfc>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00d      	beq.n	800220a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	f043 0210 	orr.w	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	f043 0201 	orr.w	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e055      	b.n	80022b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe ffc8 	bl	80011a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002214:	482b      	ldr	r0, [pc, #172]	@ (80022c4 <ADC_Enable+0x100>)
 8002216:	f7fe fe73 	bl	8000f00 <LL_ADC_GetCommonPathInternalCh>
 800221a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800221c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002224:	4b28      	ldr	r3, [pc, #160]	@ (80022c8 <ADC_Enable+0x104>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	4a28      	ldr	r2, [pc, #160]	@ (80022cc <ADC_Enable+0x108>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800223e:	e002      	b.n	8002246 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	3b01      	subs	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f9      	bne.n	8002240 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800224c:	f7fe fe26 	bl	8000e9c <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002252:	e028      	b.n	80022a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe ffb7 	bl	80011cc <LL_ADC_IsEnabled>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d104      	bne.n	800226e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe ff9b 	bl	80011a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800226e:	f7fe fe15 	bl	8000e9c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d914      	bls.n	80022a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d00d      	beq.n	80022a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228e:	f043 0210 	orr.w	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229a:	f043 0201 	orr.w	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e007      	b.n	80022b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d1cf      	bne.n	8002254 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	8000003f 	.word	0x8000003f
 80022c4:	50040300 	.word	0x50040300
 80022c8:	20000000 	.word	0x20000000
 80022cc:	053e2d63 	.word	0x053e2d63

080022d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800235c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <__NVIC_EnableIRQ+0x38>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	@ (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	@ (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	@ 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a0:	d301      	bcc.n	80024a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a6:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <SysTick_Config+0x40>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ae:	210f      	movs	r1, #15
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f7ff ff8e 	bl	80023d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <SysTick_Config+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024be:	4b04      	ldr	r3, [pc, #16]	@ (80024d0 <SysTick_Config+0x40>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff29 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024fc:	f7ff ff3e 	bl	800237c <__NVIC_GetPriorityGrouping>
 8002500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	6978      	ldr	r0, [r7, #20]
 8002508:	f7ff ff8e 	bl	8002428 <NVIC_EncodePriority>
 800250c:	4602      	mov	r2, r0
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff5d 	bl	80023d4 <__NVIC_SetPriority>
}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff31 	bl	8002398 <__NVIC_EnableIRQ>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ffa2 	bl	8002490 <SysTick_Config>
 800254c:	4603      	mov	r3, r0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002566:	e148      	b.n	80027fa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	4013      	ands	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 813a 	beq.w	80027f4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d005      	beq.n	8002598 <HAL_GPIO_Init+0x40>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d130      	bne.n	80025fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ce:	2201      	movs	r2, #1
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f003 0201 	and.w	r2, r3, #1
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b03      	cmp	r3, #3
 8002604:	d017      	beq.n	8002636 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d123      	bne.n	800268a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	08da      	lsrs	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	08da      	lsrs	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3208      	adds	r2, #8
 8002684:	6939      	ldr	r1, [r7, #16]
 8002686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2203      	movs	r2, #3
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0203 	and.w	r2, r3, #3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8094 	beq.w	80027f4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026cc:	4b52      	ldr	r3, [pc, #328]	@ (8002818 <HAL_GPIO_Init+0x2c0>)
 80026ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d0:	4a51      	ldr	r2, [pc, #324]	@ (8002818 <HAL_GPIO_Init+0x2c0>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80026d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002818 <HAL_GPIO_Init+0x2c0>)
 80026da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026e4:	4a4d      	ldr	r2, [pc, #308]	@ (800281c <HAL_GPIO_Init+0x2c4>)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	3302      	adds	r3, #2
 80026ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	220f      	movs	r2, #15
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800270e:	d00d      	beq.n	800272c <HAL_GPIO_Init+0x1d4>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a43      	ldr	r2, [pc, #268]	@ (8002820 <HAL_GPIO_Init+0x2c8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d007      	beq.n	8002728 <HAL_GPIO_Init+0x1d0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a42      	ldr	r2, [pc, #264]	@ (8002824 <HAL_GPIO_Init+0x2cc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <HAL_GPIO_Init+0x1cc>
 8002720:	2302      	movs	r3, #2
 8002722:	e004      	b.n	800272e <HAL_GPIO_Init+0x1d6>
 8002724:	2307      	movs	r3, #7
 8002726:	e002      	b.n	800272e <HAL_GPIO_Init+0x1d6>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_GPIO_Init+0x1d6>
 800272c:	2300      	movs	r3, #0
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	f002 0203 	and.w	r2, r2, #3
 8002734:	0092      	lsls	r2, r2, #2
 8002736:	4093      	lsls	r3, r2
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800273e:	4937      	ldr	r1, [pc, #220]	@ (800281c <HAL_GPIO_Init+0x2c4>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800274c:	4b36      	ldr	r3, [pc, #216]	@ (8002828 <HAL_GPIO_Init+0x2d0>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002770:	4a2d      	ldr	r2, [pc, #180]	@ (8002828 <HAL_GPIO_Init+0x2d0>)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002776:	4b2c      	ldr	r3, [pc, #176]	@ (8002828 <HAL_GPIO_Init+0x2d0>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800279a:	4a23      	ldr	r2, [pc, #140]	@ (8002828 <HAL_GPIO_Init+0x2d0>)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027a0:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <HAL_GPIO_Init+0x2d0>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027c4:	4a18      	ldr	r2, [pc, #96]	@ (8002828 <HAL_GPIO_Init+0x2d0>)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027ca:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <HAL_GPIO_Init+0x2d0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002828 <HAL_GPIO_Init+0x2d0>)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3301      	adds	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	f47f aeaf 	bne.w	8002568 <HAL_GPIO_Init+0x10>
  }
}
 800280a:	bf00      	nop
 800280c:	bf00      	nop
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40021000 	.word	0x40021000
 800281c:	40010000 	.word	0x40010000
 8002820:	48000400 	.word	0x48000400
 8002824:	48000800 	.word	0x48000800
 8002828:	40010400 	.word	0x40010400

0800282c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
 8002838:	4613      	mov	r3, r2
 800283a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800283c:	787b      	ldrb	r3, [r7, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002848:	e002      	b.n	8002850 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002860:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <HAL_PWREx_GetVoltageRange+0x18>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40007000 	.word	0x40007000

08002878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002886:	d130      	bne.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002888:	4b23      	ldr	r3, [pc, #140]	@ (8002918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002894:	d038      	beq.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002896:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800289e:	4a1e      	ldr	r2, [pc, #120]	@ (8002918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028a6:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2232      	movs	r2, #50	@ 0x32
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002920 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9b      	lsrs	r3, r3, #18
 80028b8:	3301      	adds	r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028bc:	e002      	b.n	80028c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028c4:	4b14      	ldr	r3, [pc, #80]	@ (8002918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d0:	d102      	bne.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f2      	bne.n	80028be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e4:	d110      	bne.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e00f      	b.n	800290a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f6:	d007      	beq.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028f8:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002900:	4a05      	ldr	r2, [pc, #20]	@ (8002918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002902:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002906:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40007000 	.word	0x40007000
 800291c:	20000000 	.word	0x20000000
 8002920:	431bde83 	.word	0x431bde83

08002924 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f000 bc02 	b.w	800313c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002938:	4b96      	ldr	r3, [pc, #600]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002942:	4b94      	ldr	r3, [pc, #592]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80e4 	beq.w	8002b22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_RCC_OscConfig+0x4c>
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	f040 808b 	bne.w	8002a7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b01      	cmp	r3, #1
 800296c:	f040 8087 	bne.w	8002a7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002970:	4b88      	ldr	r3, [pc, #544]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_OscConfig+0x64>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e3d9      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1a      	ldr	r2, [r3, #32]
 800298c:	4b81      	ldr	r3, [pc, #516]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <HAL_RCC_OscConfig+0x7e>
 8002998:	4b7e      	ldr	r3, [pc, #504]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029a0:	e005      	b.n	80029ae <HAL_RCC_OscConfig+0x8a>
 80029a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 80029a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d223      	bcs.n	80029fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fd8c 	bl	80034d4 <RCC_SetFlashLatencyFromMSIRange>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e3ba      	b.n	800313c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029c6:	4b73      	ldr	r3, [pc, #460]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a72      	ldr	r2, [pc, #456]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 80029cc:	f043 0308 	orr.w	r3, r3, #8
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b70      	ldr	r3, [pc, #448]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	496d      	ldr	r1, [pc, #436]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	4968      	ldr	r1, [pc, #416]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
 80029f8:	e025      	b.n	8002a46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029fa:	4b66      	ldr	r3, [pc, #408]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a65      	ldr	r2, [pc, #404]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002a00:	f043 0308 	orr.w	r3, r3, #8
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b63      	ldr	r3, [pc, #396]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4960      	ldr	r1, [pc, #384]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a18:	4b5e      	ldr	r3, [pc, #376]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	495b      	ldr	r1, [pc, #364]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fd4c 	bl	80034d4 <RCC_SetFlashLatencyFromMSIRange>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e37a      	b.n	800313c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a46:	f000 fc81 	bl	800334c <HAL_RCC_GetSysClockFreq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b51      	ldr	r3, [pc, #324]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	4950      	ldr	r1, [pc, #320]	@ (8002b98 <HAL_RCC_OscConfig+0x274>)
 8002a58:	5ccb      	ldrb	r3, [r1, r3]
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a4e      	ldr	r2, [pc, #312]	@ (8002b9c <HAL_RCC_OscConfig+0x278>)
 8002a64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a66:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba0 <HAL_RCC_OscConfig+0x27c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe f9c6 	bl	8000dfc <HAL_InitTick>
 8002a70:	4603      	mov	r3, r0
 8002a72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d052      	beq.n	8002b20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	e35e      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d032      	beq.n	8002aec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a86:	4b43      	ldr	r3, [pc, #268]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a42      	ldr	r2, [pc, #264]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a92:	f7fe fa03 	bl	8000e9c <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a9a:	f7fe f9ff 	bl	8000e9c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e347      	b.n	800313c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aac:	4b39      	ldr	r3, [pc, #228]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab8:	4b36      	ldr	r3, [pc, #216]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a35      	ldr	r2, [pc, #212]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002abe:	f043 0308 	orr.w	r3, r3, #8
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b33      	ldr	r3, [pc, #204]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4930      	ldr	r1, [pc, #192]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	492b      	ldr	r1, [pc, #172]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
 8002aea:	e01a      	b.n	8002b22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aec:	4b29      	ldr	r3, [pc, #164]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a28      	ldr	r2, [pc, #160]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002af8:	f7fe f9d0 	bl	8000e9c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b00:	f7fe f9cc 	bl	8000e9c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e314      	b.n	800313c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1dc>
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d073      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_OscConfig+0x21c>
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d10e      	bne.n	8002b58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d10b      	bne.n	8002b58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	4b14      	ldr	r3, [pc, #80]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d063      	beq.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d15f      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e2f1      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b60:	d106      	bne.n	8002b70 <HAL_RCC_OscConfig+0x24c>
 8002b62:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a0b      	ldr	r2, [pc, #44]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e025      	b.n	8002bbc <HAL_RCC_OscConfig+0x298>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b78:	d114      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x280>
 8002b7a:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a05      	ldr	r2, [pc, #20]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b03      	ldr	r3, [pc, #12]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a02      	ldr	r2, [pc, #8]	@ (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e013      	b.n	8002bbc <HAL_RCC_OscConfig+0x298>
 8002b94:	40021000 	.word	0x40021000
 8002b98:	080063dc 	.word	0x080063dc
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	20000004 	.word	0x20000004
 8002ba4:	4ba0      	ldr	r3, [pc, #640]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a9f      	ldr	r2, [pc, #636]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b9d      	ldr	r3, [pc, #628]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a9c      	ldr	r2, [pc, #624]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f96a 	bl	8000e9c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fe f966 	bl	8000e9c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	@ 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e2ae      	b.n	800313c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bde:	4b92      	ldr	r3, [pc, #584]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x2a8>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe f956 	bl	8000e9c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fe f952 	bl	8000e9c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	@ 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e29a      	b.n	800313c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c06:	4b88      	ldr	r3, [pc, #544]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x2d0>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d060      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x310>
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d119      	bne.n	8002c62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d116      	bne.n	8002c62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c34:	4b7c      	ldr	r3, [pc, #496]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_OscConfig+0x328>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e277      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b76      	ldr	r3, [pc, #472]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	4973      	ldr	r1, [pc, #460]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c60:	e040      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d023      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe f911 	bl	8000e9c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7e:	f7fe f90d 	bl	8000e9c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e255      	b.n	800313c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c90:	4b65      	ldr	r3, [pc, #404]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	4b62      	ldr	r3, [pc, #392]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	495f      	ldr	r1, [pc, #380]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	e018      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fe f8ed 	bl	8000e9c <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc6:	f7fe f8e9 	bl	8000e9c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e231      	b.n	800313c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd8:	4b53      	ldr	r3, [pc, #332]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d03c      	beq.n	8002d6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d08:	f7fe f8c8 	bl	8000e9c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d10:	f7fe f8c4 	bl	8000e9c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e20c      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d22:	4b41      	ldr	r3, [pc, #260]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ef      	beq.n	8002d10 <HAL_RCC_OscConfig+0x3ec>
 8002d30:	e01b      	b.n	8002d6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d32:	4b3d      	ldr	r3, [pc, #244]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d38:	4a3b      	ldr	r2, [pc, #236]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7fe f8ab 	bl	8000e9c <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7fe f8a7 	bl	8000e9c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e1ef      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d5c:	4b32      	ldr	r3, [pc, #200]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1ef      	bne.n	8002d4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80a6 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10d      	bne.n	8002da4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d88:	4b27      	ldr	r3, [pc, #156]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	4a26      	ldr	r2, [pc, #152]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d94:	4b24      	ldr	r3, [pc, #144]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da0:	2301      	movs	r3, #1
 8002da2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da4:	4b21      	ldr	r3, [pc, #132]	@ (8002e2c <HAL_RCC_OscConfig+0x508>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d118      	bne.n	8002de2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <HAL_RCC_OscConfig+0x508>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e2c <HAL_RCC_OscConfig+0x508>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dbc:	f7fe f86e 	bl	8000e9c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fe f86a 	bl	8000e9c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1b2      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd6:	4b15      	ldr	r3, [pc, #84]	@ (8002e2c <HAL_RCC_OscConfig+0x508>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d108      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4d8>
 8002dea:	4b0f      	ldr	r3, [pc, #60]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dfa:	e029      	b.n	8002e50 <HAL_RCC_OscConfig+0x52c>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d115      	bne.n	8002e30 <HAL_RCC_OscConfig+0x50c>
 8002e04:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	4a07      	ldr	r2, [pc, #28]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1a:	4a03      	ldr	r2, [pc, #12]	@ (8002e28 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e24:	e014      	b.n	8002e50 <HAL_RCC_OscConfig+0x52c>
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	4b9a      	ldr	r3, [pc, #616]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e36:	4a99      	ldr	r2, [pc, #612]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e40:	4b96      	ldr	r3, [pc, #600]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e46:	4a95      	ldr	r2, [pc, #596]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d016      	beq.n	8002e86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe f820 	bl	8000e9c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fe f81c 	bl	8000e9c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e162      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e76:	4b89      	ldr	r3, [pc, #548]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ed      	beq.n	8002e60 <HAL_RCC_OscConfig+0x53c>
 8002e84:	e015      	b.n	8002eb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e86:	f7fe f809 	bl	8000e9c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fe f805 	bl	8000e9c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e14b      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ea4:	4b7d      	ldr	r3, [pc, #500]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1ed      	bne.n	8002e8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb2:	7ffb      	ldrb	r3, [r7, #31]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b78      	ldr	r3, [pc, #480]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebc:	4a77      	ldr	r2, [pc, #476]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d03c      	beq.n	8002f4a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ed8:	4b70      	ldr	r3, [pc, #448]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ede:	4a6f      	ldr	r2, [pc, #444]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fd ffd8 	bl	8000e9c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef0:	f7fd ffd4 	bl	8000e9c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e11c      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f02:	4b66      	ldr	r3, [pc, #408]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ef      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x5cc>
 8002f10:	e01b      	b.n	8002f4a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f12:	4b62      	ldr	r3, [pc, #392]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f18:	4a60      	ldr	r2, [pc, #384]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fd ffbb 	bl	8000e9c <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f2a:	f7fd ffb7 	bl	8000e9c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0ff      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f3c:	4b57      	ldr	r3, [pc, #348]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ef      	bne.n	8002f2a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80f3 	beq.w	800313a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	f040 80c9 	bne.w	80030f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f5e:	4b4f      	ldr	r3, [pc, #316]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f003 0203 	and.w	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d12c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d123      	bne.n	8002fcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d11b      	bne.n	8002fcc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d113      	bne.n	8002fcc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d109      	bne.n	8002fcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d06b      	beq.n	80030a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d062      	beq.n	8003098 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fd2:	4b32      	ldr	r3, [pc, #200]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0ac      	b.n	800313c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a2d      	ldr	r2, [pc, #180]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8002fe8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fee:	f7fd ff55 	bl	8000e9c <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fd ff51 	bl	8000e9c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e099      	b.n	800313c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003008:	4b24      	ldr	r3, [pc, #144]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003014:	4b21      	ldr	r3, [pc, #132]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	4b21      	ldr	r3, [pc, #132]	@ (80030a0 <HAL_RCC_OscConfig+0x77c>)
 800301a:	4013      	ands	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003024:	3a01      	subs	r2, #1
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800302e:	0212      	lsls	r2, r2, #8
 8003030:	4311      	orrs	r1, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003036:	0852      	lsrs	r2, r2, #1
 8003038:	3a01      	subs	r2, #1
 800303a:	0552      	lsls	r2, r2, #21
 800303c:	4311      	orrs	r1, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003042:	0852      	lsrs	r2, r2, #1
 8003044:	3a01      	subs	r2, #1
 8003046:	0652      	lsls	r2, r2, #25
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800304e:	06d2      	lsls	r2, r2, #27
 8003050:	430a      	orrs	r2, r1
 8003052:	4912      	ldr	r1, [pc, #72]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8003054:	4313      	orrs	r3, r2
 8003056:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003058:	4b10      	ldr	r3, [pc, #64]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0f      	ldr	r2, [pc, #60]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 800305e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003062:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003064:	4b0d      	ldr	r3, [pc, #52]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a0c      	ldr	r2, [pc, #48]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 800306a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800306e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003070:	f7fd ff14 	bl	8000e9c <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003078:	f7fd ff10 	bl	8000e9c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e058      	b.n	800313c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308a:	4b04      	ldr	r3, [pc, #16]	@ (800309c <HAL_RCC_OscConfig+0x778>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003096:	e050      	b.n	800313a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e04f      	b.n	800313c <HAL_RCC_OscConfig+0x818>
 800309c:	40021000 	.word	0x40021000
 80030a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a4:	4b27      	ldr	r3, [pc, #156]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d144      	bne.n	800313a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030b0:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a23      	ldr	r2, [pc, #140]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 80030b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030bc:	4b21      	ldr	r3, [pc, #132]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a20      	ldr	r2, [pc, #128]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 80030c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030c8:	f7fd fee8 	bl	8000e9c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fd fee4 	bl	8000e9c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e02c      	b.n	800313c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e2:	4b18      	ldr	r3, [pc, #96]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x7ac>
 80030ee:	e024      	b.n	800313a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d01f      	beq.n	8003136 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b13      	ldr	r3, [pc, #76]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a12      	ldr	r2, [pc, #72]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 80030fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fd fecb 	bl	8000e9c <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7fd fec7 	bl	8000e9c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e00f      	b.n	800313c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311c:	4b09      	ldr	r3, [pc, #36]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	4905      	ldr	r1, [pc, #20]	@ (8003144 <HAL_RCC_OscConfig+0x820>)
 800312e:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <HAL_RCC_OscConfig+0x824>)
 8003130:	4013      	ands	r3, r2
 8003132:	60cb      	str	r3, [r1, #12]
 8003134:	e001      	b.n	800313a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	feeefffc 	.word	0xfeeefffc

0800314c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0e7      	b.n	8003330 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b75      	ldr	r3, [pc, #468]	@ (8003338 <HAL_RCC_ClockConfig+0x1ec>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d910      	bls.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b72      	ldr	r3, [pc, #456]	@ (8003338 <HAL_RCC_ClockConfig+0x1ec>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 0207 	bic.w	r2, r3, #7
 8003176:	4970      	ldr	r1, [pc, #448]	@ (8003338 <HAL_RCC_ClockConfig+0x1ec>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b6e      	ldr	r3, [pc, #440]	@ (8003338 <HAL_RCC_ClockConfig+0x1ec>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cf      	b.n	8003330 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d010      	beq.n	80031be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	4b66      	ldr	r3, [pc, #408]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d908      	bls.n	80031be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ac:	4b63      	ldr	r3, [pc, #396]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4960      	ldr	r1, [pc, #384]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d04c      	beq.n	8003264 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d2:	4b5a      	ldr	r3, [pc, #360]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d121      	bne.n	8003222 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0a6      	b.n	8003330 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ea:	4b54      	ldr	r3, [pc, #336]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d115      	bne.n	8003222 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e09a      	b.n	8003330 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003202:	4b4e      	ldr	r3, [pc, #312]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e08e      	b.n	8003330 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003212:	4b4a      	ldr	r3, [pc, #296]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e086      	b.n	8003330 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003222:	4b46      	ldr	r3, [pc, #280]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f023 0203 	bic.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4943      	ldr	r1, [pc, #268]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003234:	f7fd fe32 	bl	8000e9c <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fd fe2e 	bl	8000e9c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e06e      	b.n	8003330 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	4b3a      	ldr	r3, [pc, #232]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 020c 	and.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	429a      	cmp	r2, r3
 8003262:	d1eb      	bne.n	800323c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	4b31      	ldr	r3, [pc, #196]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800327c:	429a      	cmp	r2, r3
 800327e:	d208      	bcs.n	8003292 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003280:	4b2e      	ldr	r3, [pc, #184]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	492b      	ldr	r1, [pc, #172]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003292:	4b29      	ldr	r3, [pc, #164]	@ (8003338 <HAL_RCC_ClockConfig+0x1ec>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d210      	bcs.n	80032c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a0:	4b25      	ldr	r3, [pc, #148]	@ (8003338 <HAL_RCC_ClockConfig+0x1ec>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 0207 	bic.w	r2, r3, #7
 80032a8:	4923      	ldr	r1, [pc, #140]	@ (8003338 <HAL_RCC_ClockConfig+0x1ec>)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b0:	4b21      	ldr	r3, [pc, #132]	@ (8003338 <HAL_RCC_ClockConfig+0x1ec>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e036      	b.n	8003330 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ce:	4b1b      	ldr	r3, [pc, #108]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4918      	ldr	r1, [pc, #96]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d009      	beq.n	8003300 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ec:	4b13      	ldr	r3, [pc, #76]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4910      	ldr	r1, [pc, #64]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003300:	f000 f824 	bl	800334c <HAL_RCC_GetSysClockFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	490b      	ldr	r1, [pc, #44]	@ (8003340 <HAL_RCC_ClockConfig+0x1f4>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
 800331c:	4a09      	ldr	r2, [pc, #36]	@ (8003344 <HAL_RCC_ClockConfig+0x1f8>)
 800331e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003320:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_RCC_ClockConfig+0x1fc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fd69 	bl	8000dfc <HAL_InitTick>
 800332a:	4603      	mov	r3, r0
 800332c:	72fb      	strb	r3, [r7, #11]

  return status;
 800332e:	7afb      	ldrb	r3, [r7, #11]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40022000 	.word	0x40022000
 800333c:	40021000 	.word	0x40021000
 8003340:	080063dc 	.word	0x080063dc
 8003344:	20000000 	.word	0x20000000
 8003348:	20000004 	.word	0x20000004

0800334c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	@ 0x24
 8003350:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335a:	4b3e      	ldr	r3, [pc, #248]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x108>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003364:	4b3b      	ldr	r3, [pc, #236]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x108>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x34>
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d121      	bne.n	80033be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d11e      	bne.n	80033be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003380:	4b34      	ldr	r3, [pc, #208]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x108>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800338c:	4b31      	ldr	r3, [pc, #196]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x108>)
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e005      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800339c:	4b2d      	ldr	r3, [pc, #180]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x108>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10d      	bne.n	80033d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d102      	bne.n	80033ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033c4:	4b25      	ldr	r3, [pc, #148]	@ (800345c <HAL_RCC_GetSysClockFreq+0x110>)
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	e004      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033d0:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x114>)
 80033d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d134      	bne.n	8003444 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033da:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x108>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d003      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d003      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0xac>
 80033f0:	e005      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033f2:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <HAL_RCC_GetSysClockFreq+0x110>)
 80033f4:	617b      	str	r3, [r7, #20]
      break;
 80033f6:	e005      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x114>)
 80033fa:	617b      	str	r3, [r7, #20]
      break;
 80033fc:	e002      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	617b      	str	r3, [r7, #20]
      break;
 8003402:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003404:	4b13      	ldr	r3, [pc, #76]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x108>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	3301      	adds	r3, #1
 8003410:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003412:	4b10      	ldr	r3, [pc, #64]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x108>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	fb03 f202 	mul.w	r2, r3, r2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800342a:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x108>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	0e5b      	lsrs	r3, r3, #25
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	3301      	adds	r3, #1
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003444:	69bb      	ldr	r3, [r7, #24]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3724      	adds	r7, #36	@ 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	080063f4 	.word	0x080063f4
 800345c:	00f42400 	.word	0x00f42400
 8003460:	007a1200 	.word	0x007a1200

08003464 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <HAL_RCC_GetHCLKFreq+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000000 	.word	0x20000000

0800347c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003480:	f7ff fff0 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4904      	ldr	r1, [pc, #16]	@ (80034a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	080063ec 	.word	0x080063ec

080034a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034ac:	f7ff ffda 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0adb      	lsrs	r3, r3, #11
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4904      	ldr	r1, [pc, #16]	@ (80034d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	080063ec 	.word	0x080063ec

080034d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034e0:	4b2a      	ldr	r3, [pc, #168]	@ (800358c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034ec:	f7ff f9b6 	bl	800285c <HAL_PWREx_GetVoltageRange>
 80034f0:	6178      	str	r0, [r7, #20]
 80034f2:	e014      	b.n	800351e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034f4:	4b25      	ldr	r3, [pc, #148]	@ (800358c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	4a24      	ldr	r2, [pc, #144]	@ (800358c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003500:	4b22      	ldr	r3, [pc, #136]	@ (800358c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800350c:	f7ff f9a6 	bl	800285c <HAL_PWREx_GetVoltageRange>
 8003510:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003512:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	4a1d      	ldr	r2, [pc, #116]	@ (800358c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800351c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003524:	d10b      	bne.n	800353e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b80      	cmp	r3, #128	@ 0x80
 800352a:	d919      	bls.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003530:	d902      	bls.n	8003538 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003532:	2302      	movs	r3, #2
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	e013      	b.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003538:	2301      	movs	r3, #1
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	e010      	b.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b80      	cmp	r3, #128	@ 0x80
 8003542:	d902      	bls.n	800354a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003544:	2303      	movs	r3, #3
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	e00a      	b.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b80      	cmp	r3, #128	@ 0x80
 800354e:	d102      	bne.n	8003556 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003550:	2302      	movs	r3, #2
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	e004      	b.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b70      	cmp	r3, #112	@ 0x70
 800355a:	d101      	bne.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800355c:	2301      	movs	r3, #1
 800355e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 0207 	bic.w	r2, r3, #7
 8003568:	4909      	ldr	r1, [pc, #36]	@ (8003590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003570:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	429a      	cmp	r2, r3
 800357c:	d001      	beq.n	8003582 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	40022000 	.word	0x40022000

08003594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800359c:	2300      	movs	r3, #0
 800359e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035a0:	2300      	movs	r3, #0
 80035a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d031      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035b8:	d01a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80035ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035be:	d814      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035c8:	d10f      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80035ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d6:	e00c      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f9ce 	bl	8003980 <RCCEx_PLLSAI1_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	74fb      	strb	r3, [r7, #19]
      break;
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80035f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035f8:	4b51      	ldr	r3, [pc, #324]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003606:	494e      	ldr	r1, [pc, #312]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800360e:	e001      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 809e 	beq.w	800375e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003626:	4b46      	ldr	r3, [pc, #280]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003636:	2300      	movs	r3, #0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363c:	4b40      	ldr	r3, [pc, #256]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003640:	4a3f      	ldr	r2, [pc, #252]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003646:	6593      	str	r3, [r2, #88]	@ 0x58
 8003648:	4b3d      	ldr	r3, [pc, #244]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003654:	2301      	movs	r3, #1
 8003656:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003658:	4b3a      	ldr	r3, [pc, #232]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a39      	ldr	r2, [pc, #228]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800365e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003664:	f7fd fc1a 	bl	8000e9c <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800366a:	e009      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366c:	f7fd fc16 	bl	8000e9c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d902      	bls.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	74fb      	strb	r3, [r7, #19]
        break;
 800367e:	e005      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003680:	4b30      	ldr	r3, [pc, #192]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ef      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d15a      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003692:	4b2b      	ldr	r3, [pc, #172]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800369c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01e      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d019      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036ae:	4b24      	ldr	r3, [pc, #144]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036ba:	4b21      	ldr	r3, [pc, #132]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036da:	4a19      	ldr	r2, [pc, #100]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d016      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fd fbd6 	bl	8000e9c <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f2:	e00b      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f4:	f7fd fbd2 	bl	8000e9c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d902      	bls.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	74fb      	strb	r3, [r7, #19]
            break;
 800370a:	e006      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370c:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ec      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003720:	4b07      	ldr	r3, [pc, #28]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003726:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372e:	4904      	ldr	r1, [pc, #16]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003736:	e009      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
 800373c:	e006      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374c:	7c7b      	ldrb	r3, [r7, #17]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d105      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003752:	4b8a      	ldr	r3, [pc, #552]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003756:	4a89      	ldr	r2, [pc, #548]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003758:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800376a:	4b84      	ldr	r3, [pc, #528]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003770:	f023 0203 	bic.w	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4980      	ldr	r1, [pc, #512]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800378c:	4b7b      	ldr	r3, [pc, #492]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	f023 020c 	bic.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	4978      	ldr	r1, [pc, #480]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ae:	4b73      	ldr	r3, [pc, #460]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037bc:	496f      	ldr	r1, [pc, #444]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037d0:	4b6a      	ldr	r3, [pc, #424]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037de:	4967      	ldr	r1, [pc, #412]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037f2:	4b62      	ldr	r3, [pc, #392]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003800:	495e      	ldr	r1, [pc, #376]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003814:	4b59      	ldr	r3, [pc, #356]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003822:	4956      	ldr	r1, [pc, #344]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003836:	4b51      	ldr	r3, [pc, #324]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003844:	494d      	ldr	r1, [pc, #308]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d028      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003858:	4b48      	ldr	r3, [pc, #288]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	4945      	ldr	r1, [pc, #276]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003876:	d106      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003878:	4b40      	ldr	r3, [pc, #256]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a3f      	ldr	r2, [pc, #252]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800387e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003882:	60d3      	str	r3, [r2, #12]
 8003884:	e011      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800388e:	d10c      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	2101      	movs	r1, #1
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f872 	bl	8003980 <RCCEx_PLLSAI1_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d028      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038b6:	4b31      	ldr	r3, [pc, #196]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	492d      	ldr	r1, [pc, #180]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038d4:	d106      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d6:	4b29      	ldr	r3, [pc, #164]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	4a28      	ldr	r2, [pc, #160]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038e0:	60d3      	str	r3, [r2, #12]
 80038e2:	e011      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038ec:	d10c      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3304      	adds	r3, #4
 80038f2:	2101      	movs	r1, #1
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f843 	bl	8003980 <RCCEx_PLLSAI1_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01c      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003922:	4916      	ldr	r1, [pc, #88]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003932:	d10c      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	2102      	movs	r1, #2
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f820 	bl	8003980 <RCCEx_PLLSAI1_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800395a:	4b08      	ldr	r3, [pc, #32]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003960:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003968:	4904      	ldr	r1, [pc, #16]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003970:	7cbb      	ldrb	r3, [r7, #18]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000

08003980 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800398e:	4b74      	ldr	r3, [pc, #464]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800399a:	4b71      	ldr	r3, [pc, #452]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0203 	and.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d10d      	bne.n	80039c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
       ||
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039b2:	4b6b      	ldr	r3, [pc, #428]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
       ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d047      	beq.n	8003a56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	e044      	b.n	8003a56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d018      	beq.n	8003a06 <RCCEx_PLLSAI1_Config+0x86>
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d825      	bhi.n	8003a24 <RCCEx_PLLSAI1_Config+0xa4>
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d002      	beq.n	80039e2 <RCCEx_PLLSAI1_Config+0x62>
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d009      	beq.n	80039f4 <RCCEx_PLLSAI1_Config+0x74>
 80039e0:	e020      	b.n	8003a24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11d      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f2:	e01a      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d116      	bne.n	8003a2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a04:	e013      	b.n	8003a2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a06:	4b56      	ldr	r3, [pc, #344]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a12:	4b53      	ldr	r3, [pc, #332]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a22:	e006      	b.n	8003a32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      break;
 8003a28:	e004      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e002      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e000      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10d      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a3a:	4b49      	ldr	r3, [pc, #292]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6819      	ldr	r1, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	4943      	ldr	r1, [pc, #268]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d17c      	bne.n	8003b56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a5c:	4b40      	ldr	r3, [pc, #256]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a3f      	ldr	r2, [pc, #252]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a68:	f7fd fa18 	bl	8000e9c <HAL_GetTick>
 8003a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a6e:	e009      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a70:	f7fd fa14 	bl	8000e9c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d902      	bls.n	8003a84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	73fb      	strb	r3, [r7, #15]
        break;
 8003a82:	e005      	b.n	8003a90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a84:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ef      	bne.n	8003a70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d15f      	bne.n	8003b56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d110      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a9c:	4b30      	ldr	r3, [pc, #192]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003aa4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6892      	ldr	r2, [r2, #8]
 8003aac:	0211      	lsls	r1, r2, #8
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68d2      	ldr	r2, [r2, #12]
 8003ab2:	06d2      	lsls	r2, r2, #27
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	492a      	ldr	r1, [pc, #168]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	610b      	str	r3, [r1, #16]
 8003abc:	e027      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d112      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ac4:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003acc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6892      	ldr	r2, [r2, #8]
 8003ad4:	0211      	lsls	r1, r2, #8
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6912      	ldr	r2, [r2, #16]
 8003ada:	0852      	lsrs	r2, r2, #1
 8003adc:	3a01      	subs	r2, #1
 8003ade:	0552      	lsls	r2, r2, #21
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	491f      	ldr	r1, [pc, #124]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	610b      	str	r3, [r1, #16]
 8003ae8:	e011      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aea:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003af2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6892      	ldr	r2, [r2, #8]
 8003afa:	0211      	lsls	r1, r2, #8
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6952      	ldr	r2, [r2, #20]
 8003b00:	0852      	lsrs	r2, r2, #1
 8003b02:	3a01      	subs	r2, #1
 8003b04:	0652      	lsls	r2, r2, #25
 8003b06:	430a      	orrs	r2, r1
 8003b08:	4915      	ldr	r1, [pc, #84]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b0e:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a13      	ldr	r2, [pc, #76]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1a:	f7fd f9bf 	bl	8000e9c <HAL_GetTick>
 8003b1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b20:	e009      	b.n	8003b36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b22:	f7fd f9bb 	bl	8000e9c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d902      	bls.n	8003b36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	73fb      	strb	r3, [r7, #15]
          break;
 8003b34:	e005      	b.n	8003b42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b36:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0ef      	beq.n	8003b22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	4903      	ldr	r1, [pc, #12]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000

08003b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e040      	b.n	8003bf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd f80a 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	@ 0x24
 8003b90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fade 	bl	800416c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f8af 	bl	8003d14 <UART_SetConfig>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e01b      	b.n	8003bf8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fb5d 	bl	80042b0 <UART_CheckIdleState>
 8003bf6:	4603      	mov	r3, r0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	@ 0x28
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d177      	bne.n	8003d08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_UART_Transmit+0x24>
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e070      	b.n	8003d0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2221      	movs	r2, #33	@ 0x21
 8003c34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c36:	f7fd f931 	bl	8000e9c <HAL_GetTick>
 8003c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c54:	d108      	bne.n	8003c68 <HAL_UART_Transmit+0x68>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d104      	bne.n	8003c68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	e003      	b.n	8003c70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c70:	e02f      	b.n	8003cd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2180      	movs	r1, #128	@ 0x80
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fbbf 	bl	8004400 <UART_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e03b      	b.n	8003d0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	3302      	adds	r3, #2
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	e007      	b.n	8003cc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1c9      	bne.n	8003c72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	@ 0x40
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fb89 	bl	8004400 <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e005      	b.n	8003d0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
  }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d18:	b08a      	sub	sp, #40	@ 0x28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4bb4      	ldr	r3, [pc, #720]	@ (8004014 <UART_SetConfig+0x300>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4aa9      	ldr	r2, [pc, #676]	@ (8004018 <UART_SetConfig+0x304>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4aa0      	ldr	r2, [pc, #640]	@ (800401c <UART_SetConfig+0x308>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d126      	bne.n	8003dec <UART_SetConfig+0xd8>
 8003d9e:	4ba0      	ldr	r3, [pc, #640]	@ (8004020 <UART_SetConfig+0x30c>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d81b      	bhi.n	8003de4 <UART_SetConfig+0xd0>
 8003dac:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <UART_SetConfig+0xa0>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dd5 	.word	0x08003dd5
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003ddd 	.word	0x08003ddd
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dca:	e080      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd2:	e07c      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dda:	e078      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de2:	e074      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003de4:	2310      	movs	r3, #16
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dea:	e070      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a8c      	ldr	r2, [pc, #560]	@ (8004024 <UART_SetConfig+0x310>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d138      	bne.n	8003e68 <UART_SetConfig+0x154>
 8003df6:	4b8a      	ldr	r3, [pc, #552]	@ (8004020 <UART_SetConfig+0x30c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b0c      	cmp	r3, #12
 8003e02:	d82d      	bhi.n	8003e60 <UART_SetConfig+0x14c>
 8003e04:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <UART_SetConfig+0xf8>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08003e61 	.word	0x08003e61
 8003e18:	08003e61 	.word	0x08003e61
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e61 	.word	0x08003e61
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e49 	.word	0x08003e49
 8003e30:	08003e61 	.word	0x08003e61
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e59 	.word	0x08003e59
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e46:	e042      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e4e:	e03e      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003e50:	2304      	movs	r3, #4
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e56:	e03a      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003e58:	2308      	movs	r3, #8
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5e:	e036      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003e60:	2310      	movs	r3, #16
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e66:	e032      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6a      	ldr	r2, [pc, #424]	@ (8004018 <UART_SetConfig+0x304>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d12a      	bne.n	8003ec8 <UART_SetConfig+0x1b4>
 8003e72:	4b6b      	ldr	r3, [pc, #428]	@ (8004020 <UART_SetConfig+0x30c>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e80:	d01a      	beq.n	8003eb8 <UART_SetConfig+0x1a4>
 8003e82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e86:	d81b      	bhi.n	8003ec0 <UART_SetConfig+0x1ac>
 8003e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e8c:	d00c      	beq.n	8003ea8 <UART_SetConfig+0x194>
 8003e8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e92:	d815      	bhi.n	8003ec0 <UART_SetConfig+0x1ac>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <UART_SetConfig+0x18c>
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9c:	d008      	beq.n	8003eb0 <UART_SetConfig+0x19c>
 8003e9e:	e00f      	b.n	8003ec0 <UART_SetConfig+0x1ac>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea6:	e012      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eae:	e00e      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb6:	e00a      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003eb8:	2308      	movs	r3, #8
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ebe:	e006      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec6:	e002      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a51      	ldr	r2, [pc, #324]	@ (8004018 <UART_SetConfig+0x304>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d17a      	bne.n	8003fce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d824      	bhi.n	8003f2a <UART_SetConfig+0x216>
 8003ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <UART_SetConfig+0x1d4>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f2b 	.word	0x08003f2b
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f2b 	.word	0x08003f2b
 8003ef8:	08003f1b 	.word	0x08003f1b
 8003efc:	08003f2b 	.word	0x08003f2b
 8003f00:	08003f2b 	.word	0x08003f2b
 8003f04:	08003f2b 	.word	0x08003f2b
 8003f08:	08003f23 	.word	0x08003f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7ff fab6 	bl	800347c <HAL_RCC_GetPCLK1Freq>
 8003f10:	61f8      	str	r0, [r7, #28]
        break;
 8003f12:	e010      	b.n	8003f36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f14:	4b44      	ldr	r3, [pc, #272]	@ (8004028 <UART_SetConfig+0x314>)
 8003f16:	61fb      	str	r3, [r7, #28]
        break;
 8003f18:	e00d      	b.n	8003f36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1a:	f7ff fa17 	bl	800334c <HAL_RCC_GetSysClockFreq>
 8003f1e:	61f8      	str	r0, [r7, #28]
        break;
 8003f20:	e009      	b.n	8003f36 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f26:	61fb      	str	r3, [r7, #28]
        break;
 8003f28:	e005      	b.n	8003f36 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8107 	beq.w	800414c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d305      	bcc.n	8003f5a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d903      	bls.n	8003f62 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f60:	e0f4      	b.n	800414c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	2200      	movs	r2, #0
 8003f66:	461c      	mov	r4, r3
 8003f68:	4615      	mov	r5, r2
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	022b      	lsls	r3, r5, #8
 8003f74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f78:	0222      	lsls	r2, r4, #8
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	6849      	ldr	r1, [r1, #4]
 8003f7e:	0849      	lsrs	r1, r1, #1
 8003f80:	2000      	movs	r0, #0
 8003f82:	4688      	mov	r8, r1
 8003f84:	4681      	mov	r9, r0
 8003f86:	eb12 0a08 	adds.w	sl, r2, r8
 8003f8a:	eb43 0b09 	adc.w	fp, r3, r9
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f9c:	4650      	mov	r0, sl
 8003f9e:	4659      	mov	r1, fp
 8003fa0:	f7fc f96e 	bl	8000280 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fb2:	d308      	bcc.n	8003fc6 <UART_SetConfig+0x2b2>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fba:	d204      	bcs.n	8003fc6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	60da      	str	r2, [r3, #12]
 8003fc4:	e0c2      	b.n	800414c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fcc:	e0be      	b.n	800414c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fd6:	d16a      	bne.n	80040ae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003fd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d834      	bhi.n	800404a <UART_SetConfig+0x336>
 8003fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe8 <UART_SetConfig+0x2d4>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	0800402d 	.word	0x0800402d
 8003ff0:	08004035 	.word	0x08004035
 8003ff4:	0800404b 	.word	0x0800404b
 8003ff8:	0800403b 	.word	0x0800403b
 8003ffc:	0800404b 	.word	0x0800404b
 8004000:	0800404b 	.word	0x0800404b
 8004004:	0800404b 	.word	0x0800404b
 8004008:	08004043 	.word	0x08004043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800400c:	f7ff fa36 	bl	800347c <HAL_RCC_GetPCLK1Freq>
 8004010:	61f8      	str	r0, [r7, #28]
        break;
 8004012:	e020      	b.n	8004056 <UART_SetConfig+0x342>
 8004014:	efff69f3 	.word	0xefff69f3
 8004018:	40008000 	.word	0x40008000
 800401c:	40013800 	.word	0x40013800
 8004020:	40021000 	.word	0x40021000
 8004024:	40004400 	.word	0x40004400
 8004028:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800402c:	f7ff fa3c 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 8004030:	61f8      	str	r0, [r7, #28]
        break;
 8004032:	e010      	b.n	8004056 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004034:	4b4c      	ldr	r3, [pc, #304]	@ (8004168 <UART_SetConfig+0x454>)
 8004036:	61fb      	str	r3, [r7, #28]
        break;
 8004038:	e00d      	b.n	8004056 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7ff f987 	bl	800334c <HAL_RCC_GetSysClockFreq>
 800403e:	61f8      	str	r0, [r7, #28]
        break;
 8004040:	e009      	b.n	8004056 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004046:	61fb      	str	r3, [r7, #28]
        break;
 8004048:	e005      	b.n	8004056 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d077      	beq.n	800414c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	005a      	lsls	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	441a      	add	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b0f      	cmp	r3, #15
 8004076:	d916      	bls.n	80040a6 <UART_SetConfig+0x392>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800407e:	d212      	bcs.n	80040a6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f023 030f 	bic.w	r3, r3, #15
 8004088:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	b29b      	uxth	r3, r3
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	b29a      	uxth	r2, r3
 8004096:	8afb      	ldrh	r3, [r7, #22]
 8004098:	4313      	orrs	r3, r2
 800409a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	8afa      	ldrh	r2, [r7, #22]
 80040a2:	60da      	str	r2, [r3, #12]
 80040a4:	e052      	b.n	800414c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040ac:	e04e      	b.n	800414c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d827      	bhi.n	8004106 <UART_SetConfig+0x3f2>
 80040b6:	a201      	add	r2, pc, #4	@ (adr r2, 80040bc <UART_SetConfig+0x3a8>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040e1 	.word	0x080040e1
 80040c0:	080040e9 	.word	0x080040e9
 80040c4:	080040f1 	.word	0x080040f1
 80040c8:	08004107 	.word	0x08004107
 80040cc:	080040f7 	.word	0x080040f7
 80040d0:	08004107 	.word	0x08004107
 80040d4:	08004107 	.word	0x08004107
 80040d8:	08004107 	.word	0x08004107
 80040dc:	080040ff 	.word	0x080040ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e0:	f7ff f9cc 	bl	800347c <HAL_RCC_GetPCLK1Freq>
 80040e4:	61f8      	str	r0, [r7, #28]
        break;
 80040e6:	e014      	b.n	8004112 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e8:	f7ff f9de 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 80040ec:	61f8      	str	r0, [r7, #28]
        break;
 80040ee:	e010      	b.n	8004112 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <UART_SetConfig+0x454>)
 80040f2:	61fb      	str	r3, [r7, #28]
        break;
 80040f4:	e00d      	b.n	8004112 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f6:	f7ff f929 	bl	800334c <HAL_RCC_GetSysClockFreq>
 80040fa:	61f8      	str	r0, [r7, #28]
        break;
 80040fc:	e009      	b.n	8004112 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004102:	61fb      	str	r3, [r7, #28]
        break;
 8004104:	e005      	b.n	8004112 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004110:	bf00      	nop
    }

    if (pclk != 0U)
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d019      	beq.n	800414c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	085a      	lsrs	r2, r3, #1
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	441a      	add	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b0f      	cmp	r3, #15
 8004130:	d909      	bls.n	8004146 <UART_SetConfig+0x432>
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004138:	d205      	bcs.n	8004146 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60da      	str	r2, [r3, #12]
 8004144:	e002      	b.n	800414c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004158:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800415c:	4618      	mov	r0, r3
 800415e:	3728      	adds	r7, #40	@ 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004166:	bf00      	nop
 8004168:	00f42400 	.word	0x00f42400

0800416c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01a      	beq.n	8004282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800426a:	d10a      	bne.n	8004282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
  }
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b098      	sub	sp, #96	@ 0x60
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042c0:	f7fc fdec 	bl	8000e9c <HAL_GetTick>
 80042c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d12e      	bne.n	8004332 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042dc:	2200      	movs	r2, #0
 80042de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f88c 	bl	8004400 <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d021      	beq.n	8004332 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004302:	653b      	str	r3, [r7, #80]	@ 0x50
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800430c:	647b      	str	r3, [r7, #68]	@ 0x44
 800430e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800431a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e6      	bne.n	80042ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e062      	b.n	80043f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b04      	cmp	r3, #4
 800433e:	d149      	bne.n	80043d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004340:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004348:	2200      	movs	r2, #0
 800434a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f856 	bl	8004400 <UART_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d03c      	beq.n	80043d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	623b      	str	r3, [r7, #32]
   return(result);
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800436e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004378:	633b      	str	r3, [r7, #48]	@ 0x30
 800437a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800437e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3308      	adds	r3, #8
 8004392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	60fb      	str	r3, [r7, #12]
   return(result);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043ac:	61fa      	str	r2, [r7, #28]
 80043ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	69b9      	ldr	r1, [r7, #24]
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e011      	b.n	80043f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3758      	adds	r7, #88	@ 0x58
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004410:	e04f      	b.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d04b      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441a:	f7fc fd3f 	bl	8000e9c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <UART_WaitOnFlagUntilTimeout+0x30>
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e04e      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	d037      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b80      	cmp	r3, #128	@ 0x80
 8004446:	d034      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b40      	cmp	r3, #64	@ 0x40
 800444c:	d031      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b08      	cmp	r3, #8
 800445a:	d110      	bne.n	800447e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2208      	movs	r2, #8
 8004462:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f838 	bl	80044da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2208      	movs	r2, #8
 800446e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e029      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800448c:	d111      	bne.n	80044b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f81e 	bl	80044da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e00f      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4013      	ands	r3, r2
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d0a0      	beq.n	8004412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044da:	b480      	push	{r7}
 80044dc:	b095      	sub	sp, #84	@ 0x54
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004500:	643b      	str	r3, [r7, #64]	@ 0x40
 8004502:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004506:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800450e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e6      	bne.n	80044e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	61fb      	str	r3, [r7, #28]
   return(result);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004534:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004536:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800453a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454c:	2b01      	cmp	r3, #1
 800454e:	d118      	bne.n	8004582 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	60bb      	str	r3, [r7, #8]
   return(result);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f023 0310 	bic.w	r3, r3, #16
 8004564:	647b      	str	r3, [r7, #68]	@ 0x44
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6979      	ldr	r1, [r7, #20]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	613b      	str	r3, [r7, #16]
   return(result);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e6      	bne.n	8004550 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004596:	bf00      	nop
 8004598:	3754      	adds	r7, #84	@ 0x54
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <arm_max_f32>:
 80045a4:	f101 3cff 	add.w	ip, r1, #4294967295
 80045a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045aa:	4607      	mov	r7, r0
 80045ac:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80045b0:	ecf7 7a01 	vldmia	r7!, {s15}
 80045b4:	d063      	beq.n	800467e <arm_max_f32+0xda>
 80045b6:	f10e 0601 	add.w	r6, lr, #1
 80045ba:	3014      	adds	r0, #20
 80045bc:	00b6      	lsls	r6, r6, #2
 80045be:	2404      	movs	r4, #4
 80045c0:	2500      	movs	r5, #0
 80045c2:	ed10 7a04 	vldr	s14, [r0, #-16]
 80045c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ce:	bf48      	it	mi
 80045d0:	eef0 7a47 	vmovmi.f32	s15, s14
 80045d4:	ed10 7a03 	vldr	s14, [r0, #-12]
 80045d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045dc:	bf48      	it	mi
 80045de:	1ee5      	submi	r5, r4, #3
 80045e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e4:	bf48      	it	mi
 80045e6:	eef0 7a47 	vmovmi.f32	s15, s14
 80045ea:	ed10 7a02 	vldr	s14, [r0, #-8]
 80045ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045f2:	bf48      	it	mi
 80045f4:	1ea5      	submi	r5, r4, #2
 80045f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fa:	bf48      	it	mi
 80045fc:	eef0 7a47 	vmovmi.f32	s15, s14
 8004600:	ed10 7a01 	vldr	s14, [r0, #-4]
 8004604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004608:	bf48      	it	mi
 800460a:	f104 35ff 	addmi.w	r5, r4, #4294967295
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	bf48      	it	mi
 8004614:	4625      	movmi	r5, r4
 8004616:	f104 0404 	add.w	r4, r4, #4
 800461a:	bf48      	it	mi
 800461c:	eef0 7a47 	vmovmi.f32	s15, s14
 8004620:	42b4      	cmp	r4, r6
 8004622:	f100 0010 	add.w	r0, r0, #16
 8004626:	d1cc      	bne.n	80045c2 <arm_max_f32+0x1e>
 8004628:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800462c:	f01c 0003 	ands.w	r0, ip, #3
 8004630:	d021      	beq.n	8004676 <arm_max_f32+0xd2>
 8004632:	ed97 7a00 	vldr	s14, [r7]
 8004636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	bfc4      	itt	gt
 8004640:	eef0 7a47 	vmovgt.f32	s15, s14
 8004644:	1a0d      	subgt	r5, r1, r0
 8004646:	3801      	subs	r0, #1
 8004648:	d015      	beq.n	8004676 <arm_max_f32+0xd2>
 800464a:	ed97 7a01 	vldr	s14, [r7, #4]
 800464e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004656:	bf44      	itt	mi
 8004658:	eef0 7a47 	vmovmi.f32	s15, s14
 800465c:	1a0d      	submi	r5, r1, r0
 800465e:	2801      	cmp	r0, #1
 8004660:	d009      	beq.n	8004676 <arm_max_f32+0xd2>
 8004662:	ed97 7a02 	vldr	s14, [r7, #8]
 8004666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800466a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466e:	bf44      	itt	mi
 8004670:	eef0 7a47 	vmovmi.f32	s15, s14
 8004674:	4665      	movmi	r5, ip
 8004676:	edc2 7a00 	vstr	s15, [r2]
 800467a:	601d      	str	r5, [r3, #0]
 800467c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467e:	4675      	mov	r5, lr
 8004680:	e7d4      	b.n	800462c <arm_max_f32+0x88>
 8004682:	bf00      	nop

08004684 <arm_rfft_32_fast_init_f32>:
 8004684:	b150      	cbz	r0, 800469c <arm_rfft_32_fast_init_f32+0x18>
 8004686:	b510      	push	{r4, lr}
 8004688:	2110      	movs	r1, #16
 800468a:	4604      	mov	r4, r0
 800468c:	f000 fe7c 	bl	8005388 <arm_cfft_init_f32>
 8004690:	b918      	cbnz	r0, 800469a <arm_rfft_32_fast_init_f32+0x16>
 8004692:	4b04      	ldr	r3, [pc, #16]	@ (80046a4 <arm_rfft_32_fast_init_f32+0x20>)
 8004694:	6163      	str	r3, [r4, #20]
 8004696:	2220      	movs	r2, #32
 8004698:	8222      	strh	r2, [r4, #16]
 800469a:	bd10      	pop	{r4, pc}
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	0801ee7c 	.word	0x0801ee7c

080046a8 <arm_rfft_64_fast_init_f32>:
 80046a8:	b150      	cbz	r0, 80046c0 <arm_rfft_64_fast_init_f32+0x18>
 80046aa:	b510      	push	{r4, lr}
 80046ac:	2120      	movs	r1, #32
 80046ae:	4604      	mov	r4, r0
 80046b0:	f000 fe6a 	bl	8005388 <arm_cfft_init_f32>
 80046b4:	b918      	cbnz	r0, 80046be <arm_rfft_64_fast_init_f32+0x16>
 80046b6:	4b04      	ldr	r3, [pc, #16]	@ (80046c8 <arm_rfft_64_fast_init_f32+0x20>)
 80046b8:	6163      	str	r3, [r4, #20]
 80046ba:	2240      	movs	r2, #64	@ 0x40
 80046bc:	8222      	strh	r2, [r4, #16]
 80046be:	bd10      	pop	{r4, pc}
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	080236fc 	.word	0x080236fc

080046cc <arm_rfft_128_fast_init_f32>:
 80046cc:	b150      	cbz	r0, 80046e4 <arm_rfft_128_fast_init_f32+0x18>
 80046ce:	b510      	push	{r4, lr}
 80046d0:	2140      	movs	r1, #64	@ 0x40
 80046d2:	4604      	mov	r4, r0
 80046d4:	f000 fe58 	bl	8005388 <arm_cfft_init_f32>
 80046d8:	b918      	cbnz	r0, 80046e2 <arm_rfft_128_fast_init_f32+0x16>
 80046da:	4b04      	ldr	r3, [pc, #16]	@ (80046ec <arm_rfft_128_fast_init_f32+0x20>)
 80046dc:	6163      	str	r3, [r4, #20]
 80046de:	2280      	movs	r2, #128	@ 0x80
 80046e0:	8222      	strh	r2, [r4, #16]
 80046e2:	bd10      	pop	{r4, pc}
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	0801c87c 	.word	0x0801c87c

080046f0 <arm_rfft_256_fast_init_f32>:
 80046f0:	b158      	cbz	r0, 800470a <arm_rfft_256_fast_init_f32+0x1a>
 80046f2:	b510      	push	{r4, lr}
 80046f4:	2180      	movs	r1, #128	@ 0x80
 80046f6:	4604      	mov	r4, r0
 80046f8:	f000 fe46 	bl	8005388 <arm_cfft_init_f32>
 80046fc:	b920      	cbnz	r0, 8004708 <arm_rfft_256_fast_init_f32+0x18>
 80046fe:	4b04      	ldr	r3, [pc, #16]	@ (8004710 <arm_rfft_256_fast_init_f32+0x20>)
 8004700:	6163      	str	r3, [r4, #20]
 8004702:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004706:	8222      	strh	r2, [r4, #16]
 8004708:	bd10      	pop	{r4, pc}
 800470a:	f04f 30ff 	mov.w	r0, #4294967295
 800470e:	4770      	bx	lr
 8004710:	0801ea7c 	.word	0x0801ea7c

08004714 <arm_rfft_512_fast_init_f32>:
 8004714:	b160      	cbz	r0, 8004730 <arm_rfft_512_fast_init_f32+0x1c>
 8004716:	b510      	push	{r4, lr}
 8004718:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800471c:	4604      	mov	r4, r0
 800471e:	f000 fe33 	bl	8005388 <arm_cfft_init_f32>
 8004722:	b920      	cbnz	r0, 800472e <arm_rfft_512_fast_init_f32+0x1a>
 8004724:	4b04      	ldr	r3, [pc, #16]	@ (8004738 <arm_rfft_512_fast_init_f32+0x24>)
 8004726:	6163      	str	r3, [r4, #20]
 8004728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800472c:	8222      	strh	r2, [r4, #16]
 800472e:	bd10      	pop	{r4, pc}
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	08022efc 	.word	0x08022efc

0800473c <arm_rfft_1024_fast_init_f32>:
 800473c:	b160      	cbz	r0, 8004758 <arm_rfft_1024_fast_init_f32+0x1c>
 800473e:	b510      	push	{r4, lr}
 8004740:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004744:	4604      	mov	r4, r0
 8004746:	f000 fe1f 	bl	8005388 <arm_cfft_init_f32>
 800474a:	b920      	cbnz	r0, 8004756 <arm_rfft_1024_fast_init_f32+0x1a>
 800474c:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <arm_rfft_1024_fast_init_f32+0x24>)
 800474e:	6163      	str	r3, [r4, #20]
 8004750:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004754:	8222      	strh	r2, [r4, #16]
 8004756:	bd10      	pop	{r4, pc}
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	0801b87c 	.word	0x0801b87c

08004764 <arm_rfft_2048_fast_init_f32>:
 8004764:	b160      	cbz	r0, 8004780 <arm_rfft_2048_fast_init_f32+0x1c>
 8004766:	b510      	push	{r4, lr}
 8004768:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800476c:	4604      	mov	r4, r0
 800476e:	f000 fe0b 	bl	8005388 <arm_cfft_init_f32>
 8004772:	b920      	cbnz	r0, 800477e <arm_rfft_2048_fast_init_f32+0x1a>
 8004774:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <arm_rfft_2048_fast_init_f32+0x24>)
 8004776:	6163      	str	r3, [r4, #20]
 8004778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800477c:	8222      	strh	r2, [r4, #16]
 800477e:	bd10      	pop	{r4, pc}
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	0801ca7c 	.word	0x0801ca7c

0800478c <arm_rfft_4096_fast_init_f32>:
 800478c:	b160      	cbz	r0, 80047a8 <arm_rfft_4096_fast_init_f32+0x1c>
 800478e:	b510      	push	{r4, lr}
 8004790:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004794:	4604      	mov	r4, r0
 8004796:	f000 fdf7 	bl	8005388 <arm_cfft_init_f32>
 800479a:	b920      	cbnz	r0, 80047a6 <arm_rfft_4096_fast_init_f32+0x1a>
 800479c:	4b04      	ldr	r3, [pc, #16]	@ (80047b0 <arm_rfft_4096_fast_init_f32+0x24>)
 800479e:	6163      	str	r3, [r4, #20]
 80047a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80047a4:	8222      	strh	r2, [r4, #16]
 80047a6:	bd10      	pop	{r4, pc}
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	0801eefc 	.word	0x0801eefc

080047b4 <arm_rfft_fast_init_f32>:
 80047b4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80047b8:	d024      	beq.n	8004804 <arm_rfft_fast_init_f32+0x50>
 80047ba:	d807      	bhi.n	80047cc <arm_rfft_fast_init_f32+0x18>
 80047bc:	2980      	cmp	r1, #128	@ 0x80
 80047be:	d01c      	beq.n	80047fa <arm_rfft_fast_init_f32+0x46>
 80047c0:	d90c      	bls.n	80047dc <arm_rfft_fast_init_f32+0x28>
 80047c2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80047c6:	d11a      	bne.n	80047fe <arm_rfft_fast_init_f32+0x4a>
 80047c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004808 <arm_rfft_fast_init_f32+0x54>)
 80047ca:	4718      	bx	r3
 80047cc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80047d0:	d011      	beq.n	80047f6 <arm_rfft_fast_init_f32+0x42>
 80047d2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80047d6:	d107      	bne.n	80047e8 <arm_rfft_fast_init_f32+0x34>
 80047d8:	4b0c      	ldr	r3, [pc, #48]	@ (800480c <arm_rfft_fast_init_f32+0x58>)
 80047da:	4718      	bx	r3
 80047dc:	2920      	cmp	r1, #32
 80047de:	d008      	beq.n	80047f2 <arm_rfft_fast_init_f32+0x3e>
 80047e0:	2940      	cmp	r1, #64	@ 0x40
 80047e2:	d10c      	bne.n	80047fe <arm_rfft_fast_init_f32+0x4a>
 80047e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <arm_rfft_fast_init_f32+0x5c>)
 80047e6:	e7f0      	b.n	80047ca <arm_rfft_fast_init_f32+0x16>
 80047e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80047ec:	d107      	bne.n	80047fe <arm_rfft_fast_init_f32+0x4a>
 80047ee:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <arm_rfft_fast_init_f32+0x60>)
 80047f0:	e7eb      	b.n	80047ca <arm_rfft_fast_init_f32+0x16>
 80047f2:	4b09      	ldr	r3, [pc, #36]	@ (8004818 <arm_rfft_fast_init_f32+0x64>)
 80047f4:	e7e9      	b.n	80047ca <arm_rfft_fast_init_f32+0x16>
 80047f6:	4b09      	ldr	r3, [pc, #36]	@ (800481c <arm_rfft_fast_init_f32+0x68>)
 80047f8:	e7e7      	b.n	80047ca <arm_rfft_fast_init_f32+0x16>
 80047fa:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <arm_rfft_fast_init_f32+0x6c>)
 80047fc:	e7e5      	b.n	80047ca <arm_rfft_fast_init_f32+0x16>
 80047fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004802:	4770      	bx	lr
 8004804:	4b07      	ldr	r3, [pc, #28]	@ (8004824 <arm_rfft_fast_init_f32+0x70>)
 8004806:	e7e0      	b.n	80047ca <arm_rfft_fast_init_f32+0x16>
 8004808:	080046f1 	.word	0x080046f1
 800480c:	0800478d 	.word	0x0800478d
 8004810:	080046a9 	.word	0x080046a9
 8004814:	0800473d 	.word	0x0800473d
 8004818:	08004685 	.word	0x08004685
 800481c:	08004765 	.word	0x08004765
 8004820:	080046cd 	.word	0x080046cd
 8004824:	08004715 	.word	0x08004715

08004828 <stage_rfft_f32>:
 8004828:	b410      	push	{r4}
 800482a:	edd1 7a00 	vldr	s15, [r1]
 800482e:	ed91 7a01 	vldr	s14, [r1, #4]
 8004832:	8804      	ldrh	r4, [r0, #0]
 8004834:	6940      	ldr	r0, [r0, #20]
 8004836:	ee37 7a07 	vadd.f32	s14, s14, s14
 800483a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800483e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8004842:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004846:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800484a:	3c01      	subs	r4, #1
 800484c:	ee26 7a84 	vmul.f32	s14, s13, s8
 8004850:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004854:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8004858:	ed82 7a00 	vstr	s14, [r2]
 800485c:	edc2 7a01 	vstr	s15, [r2, #4]
 8004860:	3010      	adds	r0, #16
 8004862:	3210      	adds	r2, #16
 8004864:	3b08      	subs	r3, #8
 8004866:	3110      	adds	r1, #16
 8004868:	ed11 5a02 	vldr	s10, [r1, #-8]
 800486c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004870:	ed50 6a02 	vldr	s13, [r0, #-8]
 8004874:	edd3 4a03 	vldr	s9, [r3, #12]
 8004878:	ed51 7a01 	vldr	s15, [r1, #-4]
 800487c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8004880:	ee77 5a45 	vsub.f32	s11, s14, s10
 8004884:	ee37 7a05 	vadd.f32	s14, s14, s10
 8004888:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800488c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8004890:	ee66 5a25 	vmul.f32	s11, s12, s11
 8004894:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004898:	ee37 7a23 	vadd.f32	s14, s14, s7
 800489c:	ee66 6a85 	vmul.f32	s13, s13, s10
 80048a0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80048a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80048a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80048ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80048b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80048b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80048b8:	3c01      	subs	r4, #1
 80048ba:	ed02 7a02 	vstr	s14, [r2, #-8]
 80048be:	ed42 7a01 	vstr	s15, [r2, #-4]
 80048c2:	f1a3 0308 	sub.w	r3, r3, #8
 80048c6:	f101 0108 	add.w	r1, r1, #8
 80048ca:	f100 0008 	add.w	r0, r0, #8
 80048ce:	f102 0208 	add.w	r2, r2, #8
 80048d2:	d1c9      	bne.n	8004868 <stage_rfft_f32+0x40>
 80048d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop

080048dc <merge_rfft_f32>:
 80048dc:	b410      	push	{r4}
 80048de:	edd1 7a00 	vldr	s15, [r1]
 80048e2:	edd1 6a01 	vldr	s13, [r1, #4]
 80048e6:	8804      	ldrh	r4, [r0, #0]
 80048e8:	6940      	ldr	r0, [r0, #20]
 80048ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80048ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80048f2:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80048f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80048fa:	ee67 7a84 	vmul.f32	s15, s15, s8
 80048fe:	3c01      	subs	r4, #1
 8004900:	ed82 7a00 	vstr	s14, [r2]
 8004904:	edc2 7a01 	vstr	s15, [r2, #4]
 8004908:	b3dc      	cbz	r4, 8004982 <merge_rfft_f32+0xa6>
 800490a:	00e3      	lsls	r3, r4, #3
 800490c:	3b08      	subs	r3, #8
 800490e:	440b      	add	r3, r1
 8004910:	3010      	adds	r0, #16
 8004912:	3210      	adds	r2, #16
 8004914:	3110      	adds	r1, #16
 8004916:	ed11 5a02 	vldr	s10, [r1, #-8]
 800491a:	ed93 7a02 	vldr	s14, [r3, #8]
 800491e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8004922:	edd3 4a03 	vldr	s9, [r3, #12]
 8004926:	ed51 7a01 	vldr	s15, [r1, #-4]
 800492a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800492e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8004932:	ee37 7a05 	vadd.f32	s14, s14, s10
 8004936:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800493a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800493e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8004942:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004946:	ee37 7a63 	vsub.f32	s14, s14, s7
 800494a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800494e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8004952:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004956:	ee37 7a46 	vsub.f32	s14, s14, s12
 800495a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800495e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8004962:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004966:	3c01      	subs	r4, #1
 8004968:	ed02 7a02 	vstr	s14, [r2, #-8]
 800496c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004970:	f1a3 0308 	sub.w	r3, r3, #8
 8004974:	f101 0108 	add.w	r1, r1, #8
 8004978:	f100 0008 	add.w	r0, r0, #8
 800497c:	f102 0208 	add.w	r2, r2, #8
 8004980:	d1c9      	bne.n	8004916 <merge_rfft_f32+0x3a>
 8004982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004986:	4770      	bx	lr

08004988 <arm_rfft_fast_f32>:
 8004988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498c:	461c      	mov	r4, r3
 800498e:	4605      	mov	r5, r0
 8004990:	4616      	mov	r6, r2
 8004992:	b14b      	cbz	r3, 80049a8 <arm_rfft_fast_f32+0x20>
 8004994:	f7ff ffa2 	bl	80048dc <merge_rfft_f32>
 8004998:	4622      	mov	r2, r4
 800499a:	4631      	mov	r1, r6
 800499c:	4628      	mov	r0, r5
 800499e:	2301      	movs	r3, #1
 80049a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a4:	f000 bb34 	b.w	8005010 <arm_cfft_f32>
 80049a8:	460f      	mov	r7, r1
 80049aa:	461a      	mov	r2, r3
 80049ac:	2301      	movs	r3, #1
 80049ae:	f000 fb2f 	bl	8005010 <arm_cfft_f32>
 80049b2:	4632      	mov	r2, r6
 80049b4:	4639      	mov	r1, r7
 80049b6:	4628      	mov	r0, r5
 80049b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049bc:	f7ff bf34 	b.w	8004828 <stage_rfft_f32>

080049c0 <arm_cfft_radix8by2_f32>:
 80049c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c4:	ed2d 8b08 	vpush	{d8-d11}
 80049c8:	f8b0 c000 	ldrh.w	ip, [r0]
 80049cc:	6842      	ldr	r2, [r0, #4]
 80049ce:	4607      	mov	r7, r0
 80049d0:	4608      	mov	r0, r1
 80049d2:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80049d6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80049da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80049de:	b082      	sub	sp, #8
 80049e0:	f000 80b0 	beq.w	8004b44 <arm_cfft_radix8by2_f32+0x184>
 80049e4:	008c      	lsls	r4, r1, #2
 80049e6:	3410      	adds	r4, #16
 80049e8:	f100 0310 	add.w	r3, r0, #16
 80049ec:	1906      	adds	r6, r0, r4
 80049ee:	3210      	adds	r2, #16
 80049f0:	4444      	add	r4, r8
 80049f2:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80049f6:	f108 0510 	add.w	r5, r8, #16
 80049fa:	ed15 2a04 	vldr	s4, [r5, #-16]
 80049fe:	ed55 2a03 	vldr	s5, [r5, #-12]
 8004a02:	ed54 4a04 	vldr	s9, [r4, #-16]
 8004a06:	ed14 4a03 	vldr	s8, [r4, #-12]
 8004a0a:	ed14 6a02 	vldr	s12, [r4, #-8]
 8004a0e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8004a12:	ed53 3a04 	vldr	s7, [r3, #-16]
 8004a16:	ed15 0a02 	vldr	s0, [r5, #-8]
 8004a1a:	ed55 0a01 	vldr	s1, [r5, #-4]
 8004a1e:	ed56 6a04 	vldr	s13, [r6, #-16]
 8004a22:	ed16 3a03 	vldr	s6, [r6, #-12]
 8004a26:	ed13 7a03 	vldr	s14, [r3, #-12]
 8004a2a:	ed13 5a02 	vldr	s10, [r3, #-8]
 8004a2e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004a32:	ed16 1a02 	vldr	s2, [r6, #-8]
 8004a36:	ed56 1a01 	vldr	s3, [r6, #-4]
 8004a3a:	ee73 ba82 	vadd.f32	s23, s7, s4
 8004a3e:	ee37 ba22 	vadd.f32	s22, s14, s5
 8004a42:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8004a46:	ee33 9a04 	vadd.f32	s18, s6, s8
 8004a4a:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8004a4e:	ee75 aa00 	vadd.f32	s21, s10, s0
 8004a52:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8004a56:	ee71 8a06 	vadd.f32	s17, s2, s12
 8004a5a:	ed43 ba04 	vstr	s23, [r3, #-16]
 8004a5e:	ed03 ba03 	vstr	s22, [r3, #-12]
 8004a62:	ed43 aa02 	vstr	s21, [r3, #-8]
 8004a66:	ed03 aa01 	vstr	s20, [r3, #-4]
 8004a6a:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004a6e:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004a72:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004a76:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004a7a:	ee37 7a62 	vsub.f32	s14, s14, s5
 8004a7e:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8004a82:	ee34 4a43 	vsub.f32	s8, s8, s6
 8004a86:	ed52 6a03 	vldr	s13, [r2, #-12]
 8004a8a:	ed12 3a04 	vldr	s6, [r2, #-16]
 8004a8e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8004a92:	ee27 8a26 	vmul.f32	s16, s14, s13
 8004a96:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8004a9a:	ee23 2a83 	vmul.f32	s4, s7, s6
 8004a9e:	ee64 4a83 	vmul.f32	s9, s9, s6
 8004aa2:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8004aa6:	ee27 7a03 	vmul.f32	s14, s14, s6
 8004aaa:	ee64 6a26 	vmul.f32	s13, s8, s13
 8004aae:	ee24 4a03 	vmul.f32	s8, s8, s6
 8004ab2:	ee37 7a63 	vsub.f32	s14, s14, s7
 8004ab6:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004aba:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8004abe:	ee32 3a08 	vadd.f32	s6, s4, s16
 8004ac2:	ed05 7a03 	vstr	s14, [r5, #-12]
 8004ac6:	ed05 3a04 	vstr	s6, [r5, #-16]
 8004aca:	ed04 4a04 	vstr	s8, [r4, #-16]
 8004ace:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004ad2:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004ad6:	ee76 6a41 	vsub.f32	s13, s12, s2
 8004ada:	ee35 5a40 	vsub.f32	s10, s10, s0
 8004ade:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8004ae2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004ae6:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004aea:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004aee:	ee66 4a87 	vmul.f32	s9, s13, s14
 8004af2:	ee25 4a25 	vmul.f32	s8, s10, s11
 8004af6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004afa:	ee25 5a07 	vmul.f32	s10, s10, s14
 8004afe:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004b02:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004b06:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004b0a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004b0e:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004b12:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8004b16:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004b1a:	3310      	adds	r3, #16
 8004b1c:	4563      	cmp	r3, ip
 8004b1e:	ed45 5a02 	vstr	s11, [r5, #-8]
 8004b22:	f106 0610 	add.w	r6, r6, #16
 8004b26:	ed45 7a01 	vstr	s15, [r5, #-4]
 8004b2a:	f102 0210 	add.w	r2, r2, #16
 8004b2e:	ed04 6a02 	vstr	s12, [r4, #-8]
 8004b32:	ed04 7a01 	vstr	s14, [r4, #-4]
 8004b36:	f105 0510 	add.w	r5, r5, #16
 8004b3a:	f104 0410 	add.w	r4, r4, #16
 8004b3e:	f47f af5c 	bne.w	80049fa <arm_cfft_radix8by2_f32+0x3a>
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	b289      	uxth	r1, r1
 8004b46:	2302      	movs	r3, #2
 8004b48:	9101      	str	r1, [sp, #4]
 8004b4a:	f000 fc6f 	bl	800542c <arm_radix8_butterfly_f32>
 8004b4e:	9901      	ldr	r1, [sp, #4]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4640      	mov	r0, r8
 8004b54:	2302      	movs	r3, #2
 8004b56:	b002      	add	sp, #8
 8004b58:	ecbd 8b08 	vpop	{d8-d11}
 8004b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b60:	f000 bc64 	b.w	800542c <arm_radix8_butterfly_f32>

08004b64 <arm_cfft_radix8by4_f32>:
 8004b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b68:	ed2d 8b0a 	vpush	{d8-d12}
 8004b6c:	8803      	ldrh	r3, [r0, #0]
 8004b6e:	6842      	ldr	r2, [r0, #4]
 8004b70:	b08d      	sub	sp, #52	@ 0x34
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	900a      	str	r0, [sp, #40]	@ 0x28
 8004b76:	4608      	mov	r0, r1
 8004b78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b7c:	edd1 5a00 	vldr	s11, [r1]
 8004b80:	edd0 7a00 	vldr	s15, [r0]
 8004b84:	edd1 3a01 	vldr	s7, [r1, #4]
 8004b88:	ed90 5a01 	vldr	s10, [r0, #4]
 8004b8c:	9108      	str	r1, [sp, #32]
 8004b8e:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8004b92:	ed96 7a00 	vldr	s14, [r6]
 8004b96:	ed96 4a01 	vldr	s8, [r6, #4]
 8004b9a:	9607      	str	r6, [sp, #28]
 8004b9c:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8004ba0:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8004ba4:	edd8 4a00 	vldr	s9, [r8]
 8004ba8:	ed98 3a01 	vldr	s6, [r8, #4]
 8004bac:	ee77 6a06 	vadd.f32	s13, s14, s12
 8004bb0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004bb4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004bb8:	4604      	mov	r4, r0
 8004bba:	edc0 6a00 	vstr	s13, [r0]
 8004bbe:	edd6 5a01 	vldr	s11, [r6, #4]
 8004bc2:	edd8 2a01 	vldr	s5, [r8, #4]
 8004bc6:	ee75 6a23 	vadd.f32	s13, s10, s7
 8004bca:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004bce:	ee36 6a47 	vsub.f32	s12, s12, s14
 8004bd2:	ee74 3a27 	vadd.f32	s7, s8, s15
 8004bd6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8004bda:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8004bde:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8004be2:	3408      	adds	r4, #8
 8004be4:	ee35 4a47 	vsub.f32	s8, s10, s14
 8004be8:	460d      	mov	r5, r1
 8004bea:	ee37 7a05 	vadd.f32	s14, s14, s10
 8004bee:	4637      	mov	r7, r6
 8004bf0:	9402      	str	r4, [sp, #8]
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	3508      	adds	r5, #8
 8004bf8:	0859      	lsrs	r1, r3, #1
 8004bfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bfc:	9706      	str	r7, [sp, #24]
 8004bfe:	9505      	str	r5, [sp, #20]
 8004c00:	f102 0708 	add.w	r7, r2, #8
 8004c04:	ee36 6a64 	vsub.f32	s12, s12, s9
 8004c08:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004c0c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8004c10:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8004c14:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004c18:	ee34 5a24 	vadd.f32	s10, s8, s9
 8004c1c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004c20:	3902      	subs	r1, #2
 8004c22:	4645      	mov	r5, r8
 8004c24:	9701      	str	r7, [sp, #4]
 8004c26:	f102 0c18 	add.w	ip, r2, #24
 8004c2a:	f102 0710 	add.w	r7, r2, #16
 8004c2e:	3508      	adds	r5, #8
 8004c30:	0849      	lsrs	r1, r1, #1
 8004c32:	edc0 5a01 	vstr	s11, [r0, #4]
 8004c36:	9703      	str	r7, [sp, #12]
 8004c38:	edc6 3a00 	vstr	s7, [r6]
 8004c3c:	ed86 5a01 	vstr	s10, [r6, #4]
 8004c40:	f8cd c000 	str.w	ip, [sp]
 8004c44:	ed84 6a00 	vstr	s12, [r4]
 8004c48:	edc4 6a01 	vstr	s13, [r4, #4]
 8004c4c:	9504      	str	r5, [sp, #16]
 8004c4e:	edc8 7a00 	vstr	s15, [r8]
 8004c52:	ed88 7a01 	vstr	s14, [r8, #4]
 8004c56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004c58:	f000 8138 	beq.w	8004ecc <arm_cfft_radix8by4_f32+0x368>
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	3b0c      	subs	r3, #12
 8004c60:	f1a6 0c0c 	sub.w	ip, r6, #12
 8004c64:	f106 0510 	add.w	r5, r6, #16
 8004c68:	4626      	mov	r6, r4
 8004c6a:	46bb      	mov	fp, r7
 8004c6c:	f102 0a20 	add.w	sl, r2, #32
 8004c70:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 8004c74:	f106 0710 	add.w	r7, r6, #16
 8004c78:	4443      	add	r3, r8
 8004c7a:	f100 0e10 	add.w	lr, r0, #16
 8004c7e:	3c0c      	subs	r4, #12
 8004c80:	f1a8 060c 	sub.w	r6, r8, #12
 8004c84:	f108 0210 	add.w	r2, r8, #16
 8004c88:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8004c8c:	ed57 5a02 	vldr	s11, [r7, #-8]
 8004c90:	ed55 7a02 	vldr	s15, [r5, #-8]
 8004c94:	ed52 1a02 	vldr	s3, [r2, #-8]
 8004c98:	ed57 6a01 	vldr	s13, [r7, #-4]
 8004c9c:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8004ca0:	ed12 1a01 	vldr	s2, [r2, #-4]
 8004ca4:	ed15 8a01 	vldr	s16, [r5, #-4]
 8004ca8:	ee35 4a25 	vadd.f32	s8, s10, s11
 8004cac:	ee30 6a26 	vadd.f32	s12, s0, s13
 8004cb0:	ee37 7a84 	vadd.f32	s14, s15, s8
 8004cb4:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004cb8:	ee37 7a21 	vadd.f32	s14, s14, s3
 8004cbc:	ee75 5a65 	vsub.f32	s11, s10, s11
 8004cc0:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8004cc4:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004cc8:	ed52 6a01 	vldr	s13, [r2, #-4]
 8004ccc:	ee36 7a07 	vadd.f32	s14, s12, s14
 8004cd0:	ee78 aa25 	vadd.f32	s21, s16, s11
 8004cd4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004cd8:	ee70 3a67 	vsub.f32	s7, s0, s15
 8004cdc:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8004ce0:	ed96 7a02 	vldr	s14, [r6, #8]
 8004ce4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8004ce8:	ed94 ba02 	vldr	s22, [r4, #8]
 8004cec:	edd3 9a02 	vldr	s19, [r3, #8]
 8004cf0:	edd6 2a01 	vldr	s5, [r6, #4]
 8004cf4:	ed9c 9a01 	vldr	s18, [ip, #4]
 8004cf8:	ed93 5a01 	vldr	s10, [r3, #4]
 8004cfc:	edd4 0a01 	vldr	s1, [r4, #4]
 8004d00:	ee72 6a07 	vadd.f32	s13, s4, s14
 8004d04:	ee32 2a47 	vsub.f32	s4, s4, s14
 8004d08:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8004d0c:	ee79 4a22 	vadd.f32	s9, s18, s5
 8004d10:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8004d14:	ee79 2a62 	vsub.f32	s5, s18, s5
 8004d18:	ed8c 7a02 	vstr	s14, [ip, #8]
 8004d1c:	ed94 7a01 	vldr	s14, [r4, #4]
 8004d20:	edd3 8a01 	vldr	s17, [r3, #4]
 8004d24:	ee34 7a87 	vadd.f32	s14, s9, s14
 8004d28:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8004d2c:	ee37 7a28 	vadd.f32	s14, s14, s17
 8004d30:	ee32 9a60 	vsub.f32	s18, s4, s1
 8004d34:	ed8c 7a01 	vstr	s14, [ip, #4]
 8004d38:	ed1b 7a01 	vldr	s14, [fp, #-4]
 8004d3c:	ed1b aa02 	vldr	s20, [fp, #-8]
 8004d40:	ee73 8a22 	vadd.f32	s17, s6, s5
 8004d44:	ee39 9a05 	vadd.f32	s18, s18, s10
 8004d48:	ee7a aac1 	vsub.f32	s21, s21, s2
 8004d4c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8004d50:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8004d54:	ee69 ba07 	vmul.f32	s23, s18, s14
 8004d58:	ee6a aa87 	vmul.f32	s21, s21, s14
 8004d5c:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8004d60:	ee63 ca87 	vmul.f32	s25, s7, s14
 8004d64:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8004d68:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8004d6c:	ee68 8a87 	vmul.f32	s17, s17, s14
 8004d70:	ee73 3aea 	vsub.f32	s7, s7, s21
 8004d74:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004d78:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8004d7c:	ee3b aaca 	vsub.f32	s20, s23, s20
 8004d80:	ee34 4a67 	vsub.f32	s8, s8, s15
 8004d84:	ee76 6acb 	vsub.f32	s13, s13, s22
 8004d88:	ee36 6a48 	vsub.f32	s12, s12, s16
 8004d8c:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8004d90:	ed05 7a02 	vstr	s14, [r5, #-8]
 8004d94:	ed45 3a01 	vstr	s7, [r5, #-4]
 8004d98:	edc4 8a01 	vstr	s17, [r4, #4]
 8004d9c:	ed84 aa02 	vstr	s20, [r4, #8]
 8004da0:	ed5a 3a04 	vldr	s7, [sl, #-16]
 8004da4:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8004da8:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8004dac:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8004db0:	ee34 4a61 	vsub.f32	s8, s8, s3
 8004db4:	ee36 6a41 	vsub.f32	s12, s12, s2
 8004db8:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8004dbc:	ee66 9a26 	vmul.f32	s19, s12, s13
 8004dc0:	ee24 9a23 	vmul.f32	s18, s8, s7
 8004dc4:	ee26 6a23 	vmul.f32	s12, s12, s7
 8004dc8:	ee24 4a26 	vmul.f32	s8, s8, s13
 8004dcc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004dd0:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8004dd4:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8004dd8:	ee36 6a44 	vsub.f32	s12, s12, s8
 8004ddc:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004de0:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8004de4:	ee79 3a29 	vadd.f32	s7, s18, s19
 8004de8:	ee75 6a60 	vsub.f32	s13, s10, s1
 8004dec:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8004df0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004df4:	ed47 3a02 	vstr	s7, [r7, #-8]
 8004df8:	ed07 6a01 	vstr	s12, [r7, #-4]
 8004dfc:	ed86 7a01 	vstr	s14, [r6, #4]
 8004e00:	ed86 4a02 	vstr	s8, [r6, #8]
 8004e04:	ee35 6a81 	vadd.f32	s12, s11, s2
 8004e08:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8004e0c:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 8004e10:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 8004e14:	ee33 3a62 	vsub.f32	s6, s6, s5
 8004e18:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8004e1c:	ee67 2a26 	vmul.f32	s5, s14, s13
 8004e20:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8004e24:	ee26 5a25 	vmul.f32	s10, s12, s11
 8004e28:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004e2c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8004e30:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004e34:	ee63 6a26 	vmul.f32	s13, s6, s13
 8004e38:	ee23 3a25 	vmul.f32	s6, s6, s11
 8004e3c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004e40:	ee75 5a24 	vadd.f32	s11, s10, s9
 8004e44:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8004e48:	ee36 7a87 	vadd.f32	s14, s13, s14
 8004e4c:	3901      	subs	r1, #1
 8004e4e:	ed42 5a02 	vstr	s11, [r2, #-8]
 8004e52:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004e56:	f10e 0e08 	add.w	lr, lr, #8
 8004e5a:	ed83 3a02 	vstr	s6, [r3, #8]
 8004e5e:	ed83 7a01 	vstr	s14, [r3, #4]
 8004e62:	f1ac 0c08 	sub.w	ip, ip, #8
 8004e66:	f10b 0b08 	add.w	fp, fp, #8
 8004e6a:	f105 0508 	add.w	r5, r5, #8
 8004e6e:	f1a4 0408 	sub.w	r4, r4, #8
 8004e72:	f10a 0a10 	add.w	sl, sl, #16
 8004e76:	f107 0708 	add.w	r7, r7, #8
 8004e7a:	f1a6 0608 	sub.w	r6, r6, #8
 8004e7e:	f109 0918 	add.w	r9, r9, #24
 8004e82:	f102 0208 	add.w	r2, r2, #8
 8004e86:	f1a3 0308 	sub.w	r3, r3, #8
 8004e8a:	f47f aefd 	bne.w	8004c88 <arm_cfft_radix8by4_f32+0x124>
 8004e8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004e90:	9902      	ldr	r1, [sp, #8]
 8004e92:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8004e96:	9102      	str	r1, [sp, #8]
 8004e98:	9901      	ldr	r1, [sp, #4]
 8004e9a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8004e9e:	9101      	str	r1, [sp, #4]
 8004ea0:	9906      	ldr	r1, [sp, #24]
 8004ea2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8004ea6:	9106      	str	r1, [sp, #24]
 8004ea8:	9903      	ldr	r1, [sp, #12]
 8004eaa:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8004eae:	9103      	str	r1, [sp, #12]
 8004eb0:	9905      	ldr	r1, [sp, #20]
 8004eb2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8004eb6:	9105      	str	r1, [sp, #20]
 8004eb8:	9904      	ldr	r1, [sp, #16]
 8004eba:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004ebe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8004ec2:	9204      	str	r2, [sp, #16]
 8004ec4:	9a00      	ldr	r2, [sp, #0]
 8004ec6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	9902      	ldr	r1, [sp, #8]
 8004ece:	9d05      	ldr	r5, [sp, #20]
 8004ed0:	ed91 4a00 	vldr	s8, [r1]
 8004ed4:	edd5 6a00 	vldr	s13, [r5]
 8004ed8:	9b06      	ldr	r3, [sp, #24]
 8004eda:	9c04      	ldr	r4, [sp, #16]
 8004edc:	edd3 7a00 	vldr	s15, [r3]
 8004ee0:	ed94 3a00 	vldr	s6, [r4]
 8004ee4:	edd5 4a01 	vldr	s9, [r5, #4]
 8004ee8:	edd1 3a01 	vldr	s7, [r1, #4]
 8004eec:	ed94 2a01 	vldr	s4, [r4, #4]
 8004ef0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ef4:	9a01      	ldr	r2, [sp, #4]
 8004ef6:	ee34 6a26 	vadd.f32	s12, s8, s13
 8004efa:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8004efe:	ee37 5a86 	vadd.f32	s10, s15, s12
 8004f02:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004f06:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004f0a:	ee74 6a66 	vsub.f32	s13, s8, s13
 8004f0e:	ed81 5a00 	vstr	s10, [r1]
 8004f12:	ed93 5a01 	vldr	s10, [r3, #4]
 8004f16:	edd4 4a01 	vldr	s9, [r4, #4]
 8004f1a:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004f1e:	ee37 4a26 	vadd.f32	s8, s14, s13
 8004f22:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004f26:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8004f2a:	ed81 5a01 	vstr	s10, [r1, #4]
 8004f2e:	edd2 1a00 	vldr	s3, [r2]
 8004f32:	edd2 2a01 	vldr	s5, [r2, #4]
 8004f36:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8004f3a:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004f3e:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004f42:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004f46:	ee64 4a21 	vmul.f32	s9, s8, s3
 8004f4a:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004f4e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004f52:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004f56:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004f5a:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004f5e:	edc3 2a00 	vstr	s5, [r3]
 8004f62:	ed83 5a01 	vstr	s10, [r3, #4]
 8004f66:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004f70:	ed93 4a01 	vldr	s8, [r3, #4]
 8004f74:	ed93 5a00 	vldr	s10, [r3]
 8004f78:	9b00      	ldr	r3, [sp, #0]
 8004f7a:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004f7e:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004f82:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004f86:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004f8a:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004f8e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004f92:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8004f96:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004f9a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004f9e:	ed85 6a01 	vstr	s12, [r5, #4]
 8004fa2:	edc5 5a00 	vstr	s11, [r5]
 8004fa6:	edd3 5a01 	vldr	s11, [r3, #4]
 8004faa:	edd3 6a00 	vldr	s13, [r3]
 8004fae:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004fb2:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8004fb6:	ee27 6a26 	vmul.f32	s12, s14, s13
 8004fba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004fbe:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004fc2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004fc6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004fca:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004fce:	ed84 7a01 	vstr	s14, [r4, #4]
 8004fd2:	edc4 7a00 	vstr	s15, [r4]
 8004fd6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004fd8:	9100      	str	r1, [sp, #0]
 8004fda:	6862      	ldr	r2, [r4, #4]
 8004fdc:	2304      	movs	r3, #4
 8004fde:	f000 fa25 	bl	800542c <arm_radix8_butterfly_f32>
 8004fe2:	9807      	ldr	r0, [sp, #28]
 8004fe4:	9900      	ldr	r1, [sp, #0]
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	2304      	movs	r3, #4
 8004fea:	f000 fa1f 	bl	800542c <arm_radix8_butterfly_f32>
 8004fee:	9808      	ldr	r0, [sp, #32]
 8004ff0:	9900      	ldr	r1, [sp, #0]
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	f000 fa19 	bl	800542c <arm_radix8_butterfly_f32>
 8004ffa:	9900      	ldr	r1, [sp, #0]
 8004ffc:	6862      	ldr	r2, [r4, #4]
 8004ffe:	4640      	mov	r0, r8
 8005000:	2304      	movs	r3, #4
 8005002:	b00d      	add	sp, #52	@ 0x34
 8005004:	ecbd 8b0a 	vpop	{d8-d12}
 8005008:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	f000 ba0e 	b.w	800542c <arm_radix8_butterfly_f32>

08005010 <arm_cfft_f32>:
 8005010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005014:	2a01      	cmp	r2, #1
 8005016:	8805      	ldrh	r5, [r0, #0]
 8005018:	4607      	mov	r7, r0
 800501a:	4690      	mov	r8, r2
 800501c:	460c      	mov	r4, r1
 800501e:	4699      	mov	r9, r3
 8005020:	d05c      	beq.n	80050dc <arm_cfft_f32+0xcc>
 8005022:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8005026:	d054      	beq.n	80050d2 <arm_cfft_f32+0xc2>
 8005028:	d810      	bhi.n	800504c <arm_cfft_f32+0x3c>
 800502a:	2d40      	cmp	r5, #64	@ 0x40
 800502c:	d015      	beq.n	800505a <arm_cfft_f32+0x4a>
 800502e:	d94c      	bls.n	80050ca <arm_cfft_f32+0xba>
 8005030:	2d80      	cmp	r5, #128	@ 0x80
 8005032:	d103      	bne.n	800503c <arm_cfft_f32+0x2c>
 8005034:	4621      	mov	r1, r4
 8005036:	4638      	mov	r0, r7
 8005038:	f7ff fcc2 	bl	80049c0 <arm_cfft_radix8by2_f32>
 800503c:	f1b9 0f00 	cmp.w	r9, #0
 8005040:	d114      	bne.n	800506c <arm_cfft_f32+0x5c>
 8005042:	f1b8 0f01 	cmp.w	r8, #1
 8005046:	d019      	beq.n	800507c <arm_cfft_f32+0x6c>
 8005048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800504c:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8005050:	d03f      	beq.n	80050d2 <arm_cfft_f32+0xc2>
 8005052:	d933      	bls.n	80050bc <arm_cfft_f32+0xac>
 8005054:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005058:	d1f0      	bne.n	800503c <arm_cfft_f32+0x2c>
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	2301      	movs	r3, #1
 800505e:	4629      	mov	r1, r5
 8005060:	4620      	mov	r0, r4
 8005062:	f000 f9e3 	bl	800542c <arm_radix8_butterfly_f32>
 8005066:	f1b9 0f00 	cmp.w	r9, #0
 800506a:	d0ea      	beq.n	8005042 <arm_cfft_f32+0x32>
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	89b9      	ldrh	r1, [r7, #12]
 8005070:	4620      	mov	r0, r4
 8005072:	f000 f845 	bl	8005100 <arm_bitreversal_32>
 8005076:	f1b8 0f01 	cmp.w	r8, #1
 800507a:	d1e5      	bne.n	8005048 <arm_cfft_f32+0x38>
 800507c:	ee07 5a90 	vmov	s15, r5
 8005080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005088:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800508c:	2d00      	cmp	r5, #0
 800508e:	d0db      	beq.n	8005048 <arm_cfft_f32+0x38>
 8005090:	f104 0108 	add.w	r1, r4, #8
 8005094:	2300      	movs	r3, #0
 8005096:	3301      	adds	r3, #1
 8005098:	429d      	cmp	r5, r3
 800509a:	f101 0108 	add.w	r1, r1, #8
 800509e:	ed11 7a04 	vldr	s14, [r1, #-16]
 80050a2:	ed51 7a03 	vldr	s15, [r1, #-12]
 80050a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80050aa:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80050ae:	ed01 7a04 	vstr	s14, [r1, #-16]
 80050b2:	ed41 7a03 	vstr	s15, [r1, #-12]
 80050b6:	d1ee      	bne.n	8005096 <arm_cfft_f32+0x86>
 80050b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050bc:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80050c0:	d0cb      	beq.n	800505a <arm_cfft_f32+0x4a>
 80050c2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80050c6:	d0b5      	beq.n	8005034 <arm_cfft_f32+0x24>
 80050c8:	e7b8      	b.n	800503c <arm_cfft_f32+0x2c>
 80050ca:	2d10      	cmp	r5, #16
 80050cc:	d0b2      	beq.n	8005034 <arm_cfft_f32+0x24>
 80050ce:	2d20      	cmp	r5, #32
 80050d0:	d1b4      	bne.n	800503c <arm_cfft_f32+0x2c>
 80050d2:	4621      	mov	r1, r4
 80050d4:	4638      	mov	r0, r7
 80050d6:	f7ff fd45 	bl	8004b64 <arm_cfft_radix8by4_f32>
 80050da:	e7af      	b.n	800503c <arm_cfft_f32+0x2c>
 80050dc:	b16d      	cbz	r5, 80050fa <arm_cfft_f32+0xea>
 80050de:	310c      	adds	r1, #12
 80050e0:	2600      	movs	r6, #0
 80050e2:	ed51 7a02 	vldr	s15, [r1, #-8]
 80050e6:	3601      	adds	r6, #1
 80050e8:	eef1 7a67 	vneg.f32	s15, s15
 80050ec:	42b5      	cmp	r5, r6
 80050ee:	ed41 7a02 	vstr	s15, [r1, #-8]
 80050f2:	f101 0108 	add.w	r1, r1, #8
 80050f6:	d1f4      	bne.n	80050e2 <arm_cfft_f32+0xd2>
 80050f8:	e793      	b.n	8005022 <arm_cfft_f32+0x12>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0a4      	beq.n	8005048 <arm_cfft_f32+0x38>
 80050fe:	e7b5      	b.n	800506c <arm_cfft_f32+0x5c>

08005100 <arm_bitreversal_32>:
 8005100:	b1e9      	cbz	r1, 800513e <arm_bitreversal_32+0x3e>
 8005102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005104:	2500      	movs	r5, #0
 8005106:	f102 0e02 	add.w	lr, r2, #2
 800510a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800510e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8005112:	08a4      	lsrs	r4, r4, #2
 8005114:	089b      	lsrs	r3, r3, #2
 8005116:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800511a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800511e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8005122:	00a6      	lsls	r6, r4, #2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800512a:	3304      	adds	r3, #4
 800512c:	1d34      	adds	r4, r6, #4
 800512e:	3502      	adds	r5, #2
 8005130:	58c6      	ldr	r6, [r0, r3]
 8005132:	5907      	ldr	r7, [r0, r4]
 8005134:	50c7      	str	r7, [r0, r3]
 8005136:	428d      	cmp	r5, r1
 8005138:	5106      	str	r6, [r0, r4]
 800513a:	d3e6      	bcc.n	800510a <arm_bitreversal_32+0xa>
 800513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800513e:	4770      	bx	lr

08005140 <arm_cmplx_mag_f32>:
 8005140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005144:	ed2d 8b02 	vpush	{d8}
 8005148:	0897      	lsrs	r7, r2, #2
 800514a:	b084      	sub	sp, #16
 800514c:	d077      	beq.n	800523e <arm_cmplx_mag_f32+0xfe>
 800514e:	f04f 0800 	mov.w	r8, #0
 8005152:	f100 0420 	add.w	r4, r0, #32
 8005156:	f101 0510 	add.w	r5, r1, #16
 800515a:	463e      	mov	r6, r7
 800515c:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8005160:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8005164:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005168:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800516c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005170:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005178:	f2c0 80c5 	blt.w	8005306 <arm_cmplx_mag_f32+0x1c6>
 800517c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005184:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005188:	f100 80cb 	bmi.w	8005322 <arm_cmplx_mag_f32+0x1e2>
 800518c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8005190:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8005194:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8005198:	ee20 0a00 	vmul.f32	s0, s0, s0
 800519c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80051a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80051a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80051a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ac:	f2c0 80a8 	blt.w	8005300 <arm_cmplx_mag_f32+0x1c0>
 80051b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80051b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80051bc:	f100 80a8 	bmi.w	8005310 <arm_cmplx_mag_f32+0x1d0>
 80051c0:	ed05 8a03 	vstr	s16, [r5, #-12]
 80051c4:	ed14 0a04 	vldr	s0, [r4, #-16]
 80051c8:	ed54 7a03 	vldr	s15, [r4, #-12]
 80051cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80051d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80051d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80051d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80051dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e0:	f2c0 808b 	blt.w	80052fa <arm_cmplx_mag_f32+0x1ba>
 80051e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80051f0:	f100 80a9 	bmi.w	8005346 <arm_cmplx_mag_f32+0x206>
 80051f4:	ed05 8a02 	vstr	s16, [r5, #-8]
 80051f8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80051fc:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005200:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005204:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005208:	ee30 0a27 	vadd.f32	s0, s0, s15
 800520c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005214:	db6e      	blt.n	80052f4 <arm_cmplx_mag_f32+0x1b4>
 8005216:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005222:	f100 8087 	bmi.w	8005334 <arm_cmplx_mag_f32+0x1f4>
 8005226:	ed05 8a01 	vstr	s16, [r5, #-4]
 800522a:	3e01      	subs	r6, #1
 800522c:	f104 0420 	add.w	r4, r4, #32
 8005230:	f105 0510 	add.w	r5, r5, #16
 8005234:	d192      	bne.n	800515c <arm_cmplx_mag_f32+0x1c>
 8005236:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800523a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800523e:	f012 0203 	ands.w	r2, r2, #3
 8005242:	d052      	beq.n	80052ea <arm_cmplx_mag_f32+0x1aa>
 8005244:	ed90 0a00 	vldr	s0, [r0]
 8005248:	edd0 7a01 	vldr	s15, [r0, #4]
 800524c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005250:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005254:	2300      	movs	r3, #0
 8005256:	ee37 0a80 	vadd.f32	s0, s15, s0
 800525a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800525e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005262:	bfb8      	it	lt
 8005264:	600b      	strlt	r3, [r1, #0]
 8005266:	db08      	blt.n	800527a <arm_cmplx_mag_f32+0x13a>
 8005268:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005274:	d479      	bmi.n	800536a <arm_cmplx_mag_f32+0x22a>
 8005276:	ed81 8a00 	vstr	s16, [r1]
 800527a:	3a01      	subs	r2, #1
 800527c:	d035      	beq.n	80052ea <arm_cmplx_mag_f32+0x1aa>
 800527e:	ed90 0a02 	vldr	s0, [r0, #8]
 8005282:	edd0 7a03 	vldr	s15, [r0, #12]
 8005286:	ee20 0a00 	vmul.f32	s0, s0, s0
 800528a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800528e:	2300      	movs	r3, #0
 8005290:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005294:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529c:	bfb8      	it	lt
 800529e:	604b      	strlt	r3, [r1, #4]
 80052a0:	db08      	blt.n	80052b4 <arm_cmplx_mag_f32+0x174>
 80052a2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80052a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052aa:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80052ae:	d453      	bmi.n	8005358 <arm_cmplx_mag_f32+0x218>
 80052b0:	ed81 8a01 	vstr	s16, [r1, #4]
 80052b4:	2a01      	cmp	r2, #1
 80052b6:	d018      	beq.n	80052ea <arm_cmplx_mag_f32+0x1aa>
 80052b8:	ed90 0a04 	vldr	s0, [r0, #16]
 80052bc:	edd0 7a05 	vldr	s15, [r0, #20]
 80052c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80052c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80052c8:	2300      	movs	r3, #0
 80052ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80052ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80052d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d6:	db19      	blt.n	800530c <arm_cmplx_mag_f32+0x1cc>
 80052d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80052dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80052e4:	d44a      	bmi.n	800537c <arm_cmplx_mag_f32+0x23c>
 80052e6:	ed81 8a02 	vstr	s16, [r1, #8]
 80052ea:	b004      	add	sp, #16
 80052ec:	ecbd 8b02 	vpop	{d8}
 80052f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f4:	f845 8c04 	str.w	r8, [r5, #-4]
 80052f8:	e797      	b.n	800522a <arm_cmplx_mag_f32+0xea>
 80052fa:	f845 8c08 	str.w	r8, [r5, #-8]
 80052fe:	e77b      	b.n	80051f8 <arm_cmplx_mag_f32+0xb8>
 8005300:	f845 8c0c 	str.w	r8, [r5, #-12]
 8005304:	e75e      	b.n	80051c4 <arm_cmplx_mag_f32+0x84>
 8005306:	f845 8c10 	str.w	r8, [r5, #-16]
 800530a:	e741      	b.n	8005190 <arm_cmplx_mag_f32+0x50>
 800530c:	608b      	str	r3, [r1, #8]
 800530e:	e7ec      	b.n	80052ea <arm_cmplx_mag_f32+0x1aa>
 8005310:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005314:	9001      	str	r0, [sp, #4]
 8005316:	f001 f809 	bl	800632c <sqrtf>
 800531a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800531e:	9801      	ldr	r0, [sp, #4]
 8005320:	e74e      	b.n	80051c0 <arm_cmplx_mag_f32+0x80>
 8005322:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005326:	9001      	str	r0, [sp, #4]
 8005328:	f001 f800 	bl	800632c <sqrtf>
 800532c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005330:	9801      	ldr	r0, [sp, #4]
 8005332:	e72b      	b.n	800518c <arm_cmplx_mag_f32+0x4c>
 8005334:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005338:	9001      	str	r0, [sp, #4]
 800533a:	f000 fff7 	bl	800632c <sqrtf>
 800533e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005342:	9801      	ldr	r0, [sp, #4]
 8005344:	e76f      	b.n	8005226 <arm_cmplx_mag_f32+0xe6>
 8005346:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800534a:	9001      	str	r0, [sp, #4]
 800534c:	f000 ffee 	bl	800632c <sqrtf>
 8005350:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005354:	9801      	ldr	r0, [sp, #4]
 8005356:	e74d      	b.n	80051f4 <arm_cmplx_mag_f32+0xb4>
 8005358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800535c:	9201      	str	r2, [sp, #4]
 800535e:	f000 ffe5 	bl	800632c <sqrtf>
 8005362:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8005366:	9903      	ldr	r1, [sp, #12]
 8005368:	e7a2      	b.n	80052b0 <arm_cmplx_mag_f32+0x170>
 800536a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800536e:	9201      	str	r2, [sp, #4]
 8005370:	f000 ffdc 	bl	800632c <sqrtf>
 8005374:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8005378:	9903      	ldr	r1, [sp, #12]
 800537a:	e77c      	b.n	8005276 <arm_cmplx_mag_f32+0x136>
 800537c:	9101      	str	r1, [sp, #4]
 800537e:	f000 ffd5 	bl	800632c <sqrtf>
 8005382:	9901      	ldr	r1, [sp, #4]
 8005384:	e7af      	b.n	80052e6 <arm_cmplx_mag_f32+0x1a6>
 8005386:	bf00      	nop

08005388 <arm_cfft_init_f32>:
 8005388:	4603      	mov	r3, r0
 800538a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800538e:	f04f 0000 	mov.w	r0, #0
 8005392:	b410      	push	{r4}
 8005394:	8019      	strh	r1, [r3, #0]
 8005396:	6058      	str	r0, [r3, #4]
 8005398:	d033      	beq.n	8005402 <arm_cfft_init_f32+0x7a>
 800539a:	d918      	bls.n	80053ce <arm_cfft_init_f32+0x46>
 800539c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80053a0:	d027      	beq.n	80053f2 <arm_cfft_init_f32+0x6a>
 80053a2:	d90c      	bls.n	80053be <arm_cfft_init_f32+0x36>
 80053a4:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80053a8:	d11e      	bne.n	80053e8 <arm_cfft_init_f32+0x60>
 80053aa:	4a17      	ldr	r2, [pc, #92]	@ (8005408 <arm_cfft_init_f32+0x80>)
 80053ac:	8994      	ldrh	r4, [r2, #12]
 80053ae:	819c      	strh	r4, [r3, #12]
 80053b0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80053b4:	e9c3 2101 	strd	r2, r1, [r3, #4]
 80053b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80053c2:	d018      	beq.n	80053f6 <arm_cfft_init_f32+0x6e>
 80053c4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80053c8:	d10e      	bne.n	80053e8 <arm_cfft_init_f32+0x60>
 80053ca:	4a10      	ldr	r2, [pc, #64]	@ (800540c <arm_cfft_init_f32+0x84>)
 80053cc:	e7ee      	b.n	80053ac <arm_cfft_init_f32+0x24>
 80053ce:	2940      	cmp	r1, #64	@ 0x40
 80053d0:	d013      	beq.n	80053fa <arm_cfft_init_f32+0x72>
 80053d2:	d903      	bls.n	80053dc <arm_cfft_init_f32+0x54>
 80053d4:	2980      	cmp	r1, #128	@ 0x80
 80053d6:	d107      	bne.n	80053e8 <arm_cfft_init_f32+0x60>
 80053d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005410 <arm_cfft_init_f32+0x88>)
 80053da:	e7e7      	b.n	80053ac <arm_cfft_init_f32+0x24>
 80053dc:	2910      	cmp	r1, #16
 80053de:	d00e      	beq.n	80053fe <arm_cfft_init_f32+0x76>
 80053e0:	2920      	cmp	r1, #32
 80053e2:	d101      	bne.n	80053e8 <arm_cfft_init_f32+0x60>
 80053e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005414 <arm_cfft_init_f32+0x8c>)
 80053e6:	e7e1      	b.n	80053ac <arm_cfft_init_f32+0x24>
 80053e8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	4a09      	ldr	r2, [pc, #36]	@ (8005418 <arm_cfft_init_f32+0x90>)
 80053f4:	e7da      	b.n	80053ac <arm_cfft_init_f32+0x24>
 80053f6:	4a09      	ldr	r2, [pc, #36]	@ (800541c <arm_cfft_init_f32+0x94>)
 80053f8:	e7d8      	b.n	80053ac <arm_cfft_init_f32+0x24>
 80053fa:	4a09      	ldr	r2, [pc, #36]	@ (8005420 <arm_cfft_init_f32+0x98>)
 80053fc:	e7d6      	b.n	80053ac <arm_cfft_init_f32+0x24>
 80053fe:	4a09      	ldr	r2, [pc, #36]	@ (8005424 <arm_cfft_init_f32+0x9c>)
 8005400:	e7d4      	b.n	80053ac <arm_cfft_init_f32+0x24>
 8005402:	4a09      	ldr	r2, [pc, #36]	@ (8005428 <arm_cfft_init_f32+0xa0>)
 8005404:	e7d2      	b.n	80053ac <arm_cfft_init_f32+0x24>
 8005406:	bf00      	nop
 8005408:	0802385c 	.word	0x0802385c
 800540c:	080237fc 	.word	0x080237fc
 8005410:	0802380c 	.word	0x0802380c
 8005414:	0802384c 	.word	0x0802384c
 8005418:	0802382c 	.word	0x0802382c
 800541c:	0802386c 	.word	0x0802386c
 8005420:	0802387c 	.word	0x0802387c
 8005424:	0802381c 	.word	0x0802381c
 8005428:	0802383c 	.word	0x0802383c

0800542c <arm_radix8_butterfly_f32>:
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	ed2d 8b10 	vpush	{d8-d15}
 8005434:	b093      	sub	sp, #76	@ 0x4c
 8005436:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800543a:	4603      	mov	r3, r0
 800543c:	3304      	adds	r3, #4
 800543e:	ed9f bac0 	vldr	s22, [pc, #768]	@ 8005740 <arm_radix8_butterfly_f32+0x314>
 8005442:	9010      	str	r0, [sp, #64]	@ 0x40
 8005444:	468b      	mov	fp, r1
 8005446:	9311      	str	r3, [sp, #68]	@ 0x44
 8005448:	4689      	mov	r9, r1
 800544a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800544c:	ea4f 05db 	mov.w	r5, fp, lsr #3
 8005450:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8005454:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8005458:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 800545c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8005460:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8005464:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8005468:	9100      	str	r1, [sp, #0]
 800546a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800546e:	f108 0004 	add.w	r0, r8, #4
 8005472:	f10e 0104 	add.w	r1, lr, #4
 8005476:	462e      	mov	r6, r5
 8005478:	4420      	add	r0, r4
 800547a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800547e:	4421      	add	r1, r4
 8005480:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8005484:	960d      	str	r6, [sp, #52]	@ 0x34
 8005486:	9402      	str	r4, [sp, #8]
 8005488:	012c      	lsls	r4, r5, #4
 800548a:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 800548e:	9403      	str	r4, [sp, #12]
 8005490:	00ec      	lsls	r4, r5, #3
 8005492:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8005494:	9404      	str	r4, [sp, #16]
 8005496:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800549a:	9405      	str	r4, [sp, #20]
 800549c:	016c      	lsls	r4, r5, #5
 800549e:	9401      	str	r4, [sp, #4]
 80054a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80054a2:	9c00      	ldr	r4, [sp, #0]
 80054a4:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 80054a8:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80054ac:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80054b0:	f04f 0c00 	mov.w	ip, #0
 80054b4:	edd6 6a00 	vldr	s13, [r6]
 80054b8:	edd7 1a00 	vldr	s3, [r7]
 80054bc:	ed15 aa01 	vldr	s20, [r5, #-4]
 80054c0:	edd2 5a00 	vldr	s11, [r2]
 80054c4:	ed51 9a01 	vldr	s19, [r1, #-4]
 80054c8:	ed94 6a00 	vldr	s12, [r4]
 80054cc:	ed50 7a01 	vldr	s15, [r0, #-4]
 80054d0:	ed93 3a00 	vldr	s6, [r3]
 80054d4:	ee39 0a86 	vadd.f32	s0, s19, s12
 80054d8:	ee33 2a21 	vadd.f32	s4, s6, s3
 80054dc:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80054e0:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80054e4:	ee35 7a02 	vadd.f32	s14, s10, s4
 80054e8:	ee34 4a80 	vadd.f32	s8, s9, s0
 80054ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80054f0:	ee74 6a07 	vadd.f32	s13, s8, s14
 80054f4:	ee34 4a47 	vsub.f32	s8, s8, s14
 80054f8:	ed45 6a01 	vstr	s13, [r5, #-4]
 80054fc:	ed82 4a00 	vstr	s8, [r2]
 8005500:	edd0 6a00 	vldr	s13, [r0]
 8005504:	ed96 9a01 	vldr	s18, [r6, #4]
 8005508:	edd3 2a01 	vldr	s5, [r3, #4]
 800550c:	edd7 8a01 	vldr	s17, [r7, #4]
 8005510:	edd5 0a00 	vldr	s1, [r5]
 8005514:	edd2 3a01 	vldr	s7, [r2, #4]
 8005518:	ed94 8a01 	vldr	s16, [r4, #4]
 800551c:	ed91 7a00 	vldr	s14, [r1]
 8005520:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005524:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8005528:	ee72 aae8 	vsub.f32	s21, s5, s17
 800552c:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8005530:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8005534:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005538:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800553c:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8005540:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8005544:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8005548:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800554c:	ee77 0a08 	vadd.f32	s1, s14, s16
 8005550:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8005554:	ee37 7a48 	vsub.f32	s14, s14, s16
 8005558:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800555c:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8005560:	ee76 6a89 	vadd.f32	s13, s13, s18
 8005564:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8005568:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800556c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005570:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005574:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8005578:	ee33 2a20 	vadd.f32	s4, s6, s1
 800557c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005580:	ee33 3a60 	vsub.f32	s6, s6, s1
 8005584:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8005588:	ee77 0a01 	vadd.f32	s1, s14, s2
 800558c:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8005590:	ee37 7a41 	vsub.f32	s14, s14, s2
 8005594:	ee73 1a84 	vadd.f32	s3, s7, s8
 8005598:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800559c:	ee76 3a27 	vadd.f32	s7, s12, s15
 80055a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80055a4:	ee32 8a00 	vadd.f32	s16, s4, s0
 80055a8:	ee33 1a45 	vsub.f32	s2, s6, s10
 80055ac:	ee32 2a40 	vsub.f32	s4, s4, s0
 80055b0:	ee35 5a03 	vadd.f32	s10, s10, s6
 80055b4:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80055b8:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80055bc:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80055c0:	ee34 6a67 	vsub.f32	s12, s8, s15
 80055c4:	ee75 4a87 	vadd.f32	s9, s11, s14
 80055c8:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80055cc:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80055d0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80055d4:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80055d8:	44dc      	add	ip, fp
 80055da:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80055de:	45e1      	cmp	r9, ip
 80055e0:	ed85 8a00 	vstr	s16, [r5]
 80055e4:	ed82 2a01 	vstr	s4, [r2, #4]
 80055e8:	4455      	add	r5, sl
 80055ea:	ed01 0a01 	vstr	s0, [r1, #-4]
 80055ee:	4452      	add	r2, sl
 80055f0:	edc4 6a00 	vstr	s13, [r4]
 80055f4:	ed81 1a00 	vstr	s2, [r1]
 80055f8:	ed84 5a01 	vstr	s10, [r4, #4]
 80055fc:	4451      	add	r1, sl
 80055fe:	ed00 3a01 	vstr	s6, [r0, #-4]
 8005602:	4454      	add	r4, sl
 8005604:	edc7 2a00 	vstr	s5, [r7]
 8005608:	edc6 4a00 	vstr	s9, [r6]
 800560c:	ed83 7a00 	vstr	s14, [r3]
 8005610:	edc0 5a00 	vstr	s11, [r0]
 8005614:	edc7 3a01 	vstr	s7, [r7, #4]
 8005618:	4450      	add	r0, sl
 800561a:	ed86 6a01 	vstr	s12, [r6, #4]
 800561e:	4457      	add	r7, sl
 8005620:	edc3 7a01 	vstr	s15, [r3, #4]
 8005624:	4456      	add	r6, sl
 8005626:	4453      	add	r3, sl
 8005628:	f63f af44 	bhi.w	80054b4 <arm_radix8_butterfly_f32+0x88>
 800562c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800562e:	2b07      	cmp	r3, #7
 8005630:	f240 81c3 	bls.w	80059ba <arm_radix8_butterfly_f32+0x58e>
 8005634:	9805      	ldr	r0, [sp, #20]
 8005636:	9a01      	ldr	r2, [sp, #4]
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	9d04      	ldr	r5, [sp, #16]
 800563c:	9902      	ldr	r1, [sp, #8]
 800563e:	f100 0c08 	add.w	ip, r0, #8
 8005642:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005644:	3208      	adds	r2, #8
 8005646:	1882      	adds	r2, r0, r2
 8005648:	3308      	adds	r3, #8
 800564a:	920a      	str	r2, [sp, #40]	@ 0x28
 800564c:	4602      	mov	r2, r0
 800564e:	18d3      	adds	r3, r2, r3
 8005650:	3108      	adds	r1, #8
 8005652:	3508      	adds	r5, #8
 8005654:	1851      	adds	r1, r2, r1
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	4613      	mov	r3, r2
 800565a:	442a      	add	r2, r5
 800565c:	9206      	str	r2, [sp, #24]
 800565e:	461a      	mov	r2, r3
 8005660:	4462      	add	r2, ip
 8005662:	f10e 0e0c 	add.w	lr, lr, #12
 8005666:	9205      	str	r2, [sp, #20]
 8005668:	461a      	mov	r2, r3
 800566a:	4472      	add	r2, lr
 800566c:	f108 0808 	add.w	r8, r8, #8
 8005670:	330c      	adds	r3, #12
 8005672:	4440      	add	r0, r8
 8005674:	f04f 0e00 	mov.w	lr, #0
 8005678:	9203      	str	r2, [sp, #12]
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	465a      	mov	r2, fp
 800567e:	464b      	mov	r3, r9
 8005680:	46f3      	mov	fp, lr
 8005682:	46d1      	mov	r9, sl
 8005684:	9009      	str	r0, [sp, #36]	@ 0x24
 8005686:	9108      	str	r1, [sp, #32]
 8005688:	f04f 0801 	mov.w	r8, #1
 800568c:	469a      	mov	sl, r3
 800568e:	4696      	mov	lr, r2
 8005690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005692:	449b      	add	fp, r3
 8005694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005696:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800569a:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800569e:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 80056a2:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 80056a6:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 80056aa:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 80056ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80056b0:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 80056b4:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 80056b8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80056ba:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 80056be:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 80056c2:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 80056c6:	9202      	str	r2, [sp, #8]
 80056c8:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	edd3 da01 	vldr	s27, [r3, #4]
 80056d4:	9b01      	ldr	r3, [sp, #4]
 80056d6:	edd0 7a00 	vldr	s15, [r0]
 80056da:	ed93 da01 	vldr	s26, [r3, #4]
 80056de:	9b02      	ldr	r3, [sp, #8]
 80056e0:	edcd 7a02 	vstr	s15, [sp, #8]
 80056e4:	ed93 ca01 	vldr	s24, [r3, #4]
 80056e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056ea:	eddc ca01 	vldr	s25, [ip, #4]
 80056ee:	edd3 7a00 	vldr	s15, [r3]
 80056f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056f4:	edcd 7a01 	vstr	s15, [sp, #4]
 80056f8:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80056fc:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8005700:	9200      	str	r2, [sp, #0]
 8005702:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 8005706:	edd3 7a00 	vldr	s15, [r3]
 800570a:	ed92 fa01 	vldr	s30, [r2, #4]
 800570e:	9a00      	ldr	r2, [sp, #0]
 8005710:	edd1 ea01 	vldr	s29, [r1, #4]
 8005714:	ed92 ea01 	vldr	s28, [r2, #4]
 8005718:	edd7 ba00 	vldr	s23, [r7]
 800571c:	edd6 aa00 	vldr	s21, [r6]
 8005720:	ed95 aa00 	vldr	s20, [r5]
 8005724:	edd4 9a00 	vldr	s19, [r4]
 8005728:	edcd 7a00 	vstr	s15, [sp]
 800572c:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8005730:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8005734:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8005738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800573c:	46c4      	mov	ip, r8
 800573e:	e001      	b.n	8005744 <arm_radix8_butterfly_f32+0x318>
 8005740:	3f3504f3 	.word	0x3f3504f3
 8005744:	ed91 6a00 	vldr	s12, [r1]
 8005748:	ed93 5a00 	vldr	s10, [r3]
 800574c:	edd0 fa00 	vldr	s31, [r0]
 8005750:	edd4 7a00 	vldr	s15, [r4]
 8005754:	ed95 7a00 	vldr	s14, [r5]
 8005758:	ed56 3a01 	vldr	s7, [r6, #-4]
 800575c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8005760:	ed92 2a00 	vldr	s4, [r2]
 8005764:	ed96 0a00 	vldr	s0, [r6]
 8005768:	ee33 8a85 	vadd.f32	s16, s7, s10
 800576c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8005770:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8005774:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005778:	ee78 1a04 	vadd.f32	s3, s16, s8
 800577c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8005780:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005784:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800578c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8005790:	edd4 8a01 	vldr	s17, [r4, #4]
 8005794:	ed92 9a01 	vldr	s18, [r2, #4]
 8005798:	edd7 0a00 	vldr	s1, [r7]
 800579c:	edd1 2a01 	vldr	s5, [r1, #4]
 80057a0:	ed95 7a01 	vldr	s14, [r5, #4]
 80057a4:	ed93 6a01 	vldr	s12, [r3, #4]
 80057a8:	edd0 5a01 	vldr	s11, [r0, #4]
 80057ac:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80057b0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80057b4:	ee39 5a62 	vsub.f32	s10, s18, s5
 80057b8:	ee78 fac7 	vsub.f32	s31, s17, s14
 80057bc:	ee38 4a44 	vsub.f32	s8, s16, s8
 80057c0:	ee38 7a87 	vadd.f32	s14, s17, s14
 80057c4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80057c8:	ee79 2a22 	vadd.f32	s5, s18, s5
 80057cc:	ee32 9a27 	vadd.f32	s18, s4, s15
 80057d0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80057d4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80057d8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80057dc:	ee71 4a64 	vsub.f32	s9, s2, s9
 80057e0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80057e4:	ee32 1a08 	vadd.f32	s2, s4, s16
 80057e8:	ee72 fa87 	vadd.f32	s31, s5, s14
 80057ec:	ee32 2a48 	vsub.f32	s4, s4, s16
 80057f0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80057f4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80057f8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80057fc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8005800:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005804:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8005808:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800580c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005810:	ee30 6a46 	vsub.f32	s12, s0, s12
 8005814:	ee74 0a22 	vadd.f32	s1, s8, s5
 8005818:	ee36 0a28 	vadd.f32	s0, s12, s17
 800581c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005820:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005824:	ee32 4a64 	vsub.f32	s8, s4, s9
 8005828:	ee73 8a09 	vadd.f32	s17, s6, s18
 800582c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8005830:	ee33 9a49 	vsub.f32	s18, s6, s18
 8005834:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8005838:	ee35 3a85 	vadd.f32	s6, s11, s10
 800583c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8005840:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8005844:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005848:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800584c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8005850:	ee35 8a03 	vadd.f32	s16, s10, s6
 8005854:	ee38 0a80 	vadd.f32	s0, s17, s0
 8005858:	ee73 3a82 	vadd.f32	s7, s7, s4
 800585c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8005860:	ed9d 2a00 	vldr	s4, [sp]
 8005864:	eddd 1a01 	vldr	s3, [sp, #4]
 8005868:	ee35 5a43 	vsub.f32	s10, s10, s6
 800586c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8005870:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8005874:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8005878:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800587c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8005880:	ee76 5a49 	vsub.f32	s11, s12, s18
 8005884:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8005888:	ee39 6a06 	vadd.f32	s12, s18, s12
 800588c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8005890:	ee21 4a84 	vmul.f32	s8, s3, s8
 8005894:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8005898:	ee22 7a07 	vmul.f32	s14, s4, s14
 800589c:	ee22 2a08 	vmul.f32	s4, s4, s16
 80058a0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80058a4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80058a8:	ee31 1a09 	vadd.f32	s2, s2, s18
 80058ac:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80058b0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80058b4:	ee74 0a60 	vsub.f32	s1, s8, s1
 80058b8:	ee37 7a48 	vsub.f32	s14, s14, s16
 80058bc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80058c0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80058c4:	ee72 1a21 	vadd.f32	s3, s4, s3
 80058c8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80058cc:	ee38 2a89 	vadd.f32	s4, s17, s18
 80058d0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80058d4:	ee38 8a04 	vadd.f32	s16, s16, s8
 80058d8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80058dc:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80058e0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80058e4:	eddd 5a02 	vldr	s11, [sp, #8]
 80058e8:	edc6 fa00 	vstr	s31, [r6]
 80058ec:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80058f0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80058f4:	ee30 0a45 	vsub.f32	s0, s0, s10
 80058f8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80058fc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8005900:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8005904:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8005908:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800590c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8005910:	ee74 4a89 	vadd.f32	s9, s9, s18
 8005914:	ee34 3a43 	vsub.f32	s6, s8, s6
 8005918:	ee78 8a85 	vadd.f32	s17, s17, s10
 800591c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005920:	44f4      	add	ip, lr
 8005922:	45e2      	cmp	sl, ip
 8005924:	edc3 3a00 	vstr	s7, [r3]
 8005928:	edc3 6a01 	vstr	s13, [r3, #4]
 800592c:	444e      	add	r6, r9
 800592e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8005932:	edc7 0a00 	vstr	s1, [r7]
 8005936:	444b      	add	r3, r9
 8005938:	ed80 2a00 	vstr	s4, [r0]
 800593c:	edc0 2a01 	vstr	s5, [r0, #4]
 8005940:	444f      	add	r7, r9
 8005942:	edc2 1a00 	vstr	s3, [r2]
 8005946:	ed82 7a01 	vstr	s14, [r2, #4]
 800594a:	4448      	add	r0, r9
 800594c:	ed85 8a00 	vstr	s16, [r5]
 8005950:	ed85 0a01 	vstr	s0, [r5, #4]
 8005954:	444a      	add	r2, r9
 8005956:	edc1 4a00 	vstr	s9, [r1]
 800595a:	444d      	add	r5, r9
 800595c:	ed81 3a01 	vstr	s6, [r1, #4]
 8005960:	edc4 8a00 	vstr	s17, [r4]
 8005964:	ed84 6a01 	vstr	s12, [r4, #4]
 8005968:	4449      	add	r1, r9
 800596a:	444c      	add	r4, r9
 800596c:	f63f aeea 	bhi.w	8005744 <arm_radix8_butterfly_f32+0x318>
 8005970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005972:	3308      	adds	r3, #8
 8005974:	930a      	str	r3, [sp, #40]	@ 0x28
 8005976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005978:	3308      	adds	r3, #8
 800597a:	9309      	str	r3, [sp, #36]	@ 0x24
 800597c:	9b08      	ldr	r3, [sp, #32]
 800597e:	3308      	adds	r3, #8
 8005980:	9308      	str	r3, [sp, #32]
 8005982:	9b07      	ldr	r3, [sp, #28]
 8005984:	3308      	adds	r3, #8
 8005986:	9307      	str	r3, [sp, #28]
 8005988:	9b06      	ldr	r3, [sp, #24]
 800598a:	3308      	adds	r3, #8
 800598c:	9306      	str	r3, [sp, #24]
 800598e:	9b05      	ldr	r3, [sp, #20]
 8005990:	3308      	adds	r3, #8
 8005992:	9305      	str	r3, [sp, #20]
 8005994:	9b04      	ldr	r3, [sp, #16]
 8005996:	3308      	adds	r3, #8
 8005998:	9304      	str	r3, [sp, #16]
 800599a:	9b03      	ldr	r3, [sp, #12]
 800599c:	3308      	adds	r3, #8
 800599e:	9303      	str	r3, [sp, #12]
 80059a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059a2:	f108 0801 	add.w	r8, r8, #1
 80059a6:	4543      	cmp	r3, r8
 80059a8:	f47f ae72 	bne.w	8005690 <arm_radix8_butterfly_f32+0x264>
 80059ac:	469b      	mov	fp, r3
 80059ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	46d1      	mov	r9, sl
 80059b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80059b8:	e547      	b.n	800544a <arm_radix8_butterfly_f32+0x1e>
 80059ba:	b013      	add	sp, #76	@ 0x4c
 80059bc:	ecbd 8b10 	vpop	{d8-d15}
 80059c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059c4 <sniprintf>:
 80059c4:	b40c      	push	{r2, r3}
 80059c6:	b530      	push	{r4, r5, lr}
 80059c8:	4b18      	ldr	r3, [pc, #96]	@ (8005a2c <sniprintf+0x68>)
 80059ca:	1e0c      	subs	r4, r1, #0
 80059cc:	681d      	ldr	r5, [r3, #0]
 80059ce:	b09d      	sub	sp, #116	@ 0x74
 80059d0:	da08      	bge.n	80059e4 <sniprintf+0x20>
 80059d2:	238b      	movs	r3, #139	@ 0x8b
 80059d4:	602b      	str	r3, [r5, #0]
 80059d6:	f04f 30ff 	mov.w	r0, #4294967295
 80059da:	b01d      	add	sp, #116	@ 0x74
 80059dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059e0:	b002      	add	sp, #8
 80059e2:	4770      	bx	lr
 80059e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80059e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80059f2:	bf14      	ite	ne
 80059f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059f8:	4623      	moveq	r3, r4
 80059fa:	9304      	str	r3, [sp, #16]
 80059fc:	9307      	str	r3, [sp, #28]
 80059fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a02:	9002      	str	r0, [sp, #8]
 8005a04:	9006      	str	r0, [sp, #24]
 8005a06:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a0c:	ab21      	add	r3, sp, #132	@ 0x84
 8005a0e:	a902      	add	r1, sp, #8
 8005a10:	4628      	mov	r0, r5
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	f000 f994 	bl	8005d40 <_svfiprintf_r>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	bfbc      	itt	lt
 8005a1c:	238b      	movlt	r3, #139	@ 0x8b
 8005a1e:	602b      	strlt	r3, [r5, #0]
 8005a20:	2c00      	cmp	r4, #0
 8005a22:	d0da      	beq.n	80059da <sniprintf+0x16>
 8005a24:	9b02      	ldr	r3, [sp, #8]
 8005a26:	2200      	movs	r2, #0
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e7d6      	b.n	80059da <sniprintf+0x16>
 8005a2c:	2000000c 	.word	0x2000000c

08005a30 <memset>:
 8005a30:	4402      	add	r2, r0
 8005a32:	4603      	mov	r3, r0
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d100      	bne.n	8005a3a <memset+0xa>
 8005a38:	4770      	bx	lr
 8005a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3e:	e7f9      	b.n	8005a34 <memset+0x4>

08005a40 <__errno>:
 8005a40:	4b01      	ldr	r3, [pc, #4]	@ (8005a48 <__errno+0x8>)
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	2000000c 	.word	0x2000000c

08005a4c <__libc_init_array>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a84 <__libc_init_array+0x38>)
 8005a50:	4c0d      	ldr	r4, [pc, #52]	@ (8005a88 <__libc_init_array+0x3c>)
 8005a52:	1b64      	subs	r4, r4, r5
 8005a54:	10a4      	asrs	r4, r4, #2
 8005a56:	2600      	movs	r6, #0
 8005a58:	42a6      	cmp	r6, r4
 8005a5a:	d109      	bne.n	8005a70 <__libc_init_array+0x24>
 8005a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a8c <__libc_init_array+0x40>)
 8005a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a90 <__libc_init_array+0x44>)
 8005a60:	f000 fc86 	bl	8006370 <_init>
 8005a64:	1b64      	subs	r4, r4, r5
 8005a66:	10a4      	asrs	r4, r4, #2
 8005a68:	2600      	movs	r6, #0
 8005a6a:	42a6      	cmp	r6, r4
 8005a6c:	d105      	bne.n	8005a7a <__libc_init_array+0x2e>
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a74:	4798      	blx	r3
 8005a76:	3601      	adds	r6, #1
 8005a78:	e7ee      	b.n	8005a58 <__libc_init_array+0xc>
 8005a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7e:	4798      	blx	r3
 8005a80:	3601      	adds	r6, #1
 8005a82:	e7f2      	b.n	8005a6a <__libc_init_array+0x1e>
 8005a84:	080238c8 	.word	0x080238c8
 8005a88:	080238c8 	.word	0x080238c8
 8005a8c:	080238c8 	.word	0x080238c8
 8005a90:	080238cc 	.word	0x080238cc

08005a94 <__retarget_lock_acquire_recursive>:
 8005a94:	4770      	bx	lr

08005a96 <__retarget_lock_release_recursive>:
 8005a96:	4770      	bx	lr

08005a98 <_free_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	d041      	beq.n	8005b24 <_free_r+0x8c>
 8005aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa4:	1f0c      	subs	r4, r1, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bfb8      	it	lt
 8005aaa:	18e4      	addlt	r4, r4, r3
 8005aac:	f000 f8e0 	bl	8005c70 <__malloc_lock>
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b28 <_free_r+0x90>)
 8005ab2:	6813      	ldr	r3, [r2, #0]
 8005ab4:	b933      	cbnz	r3, 8005ac4 <_free_r+0x2c>
 8005ab6:	6063      	str	r3, [r4, #4]
 8005ab8:	6014      	str	r4, [r2, #0]
 8005aba:	4628      	mov	r0, r5
 8005abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ac0:	f000 b8dc 	b.w	8005c7c <__malloc_unlock>
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d908      	bls.n	8005ada <_free_r+0x42>
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	1821      	adds	r1, r4, r0
 8005acc:	428b      	cmp	r3, r1
 8005ace:	bf01      	itttt	eq
 8005ad0:	6819      	ldreq	r1, [r3, #0]
 8005ad2:	685b      	ldreq	r3, [r3, #4]
 8005ad4:	1809      	addeq	r1, r1, r0
 8005ad6:	6021      	streq	r1, [r4, #0]
 8005ad8:	e7ed      	b.n	8005ab6 <_free_r+0x1e>
 8005ada:	461a      	mov	r2, r3
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	b10b      	cbz	r3, 8005ae4 <_free_r+0x4c>
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d9fa      	bls.n	8005ada <_free_r+0x42>
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	1850      	adds	r0, r2, r1
 8005ae8:	42a0      	cmp	r0, r4
 8005aea:	d10b      	bne.n	8005b04 <_free_r+0x6c>
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	4401      	add	r1, r0
 8005af0:	1850      	adds	r0, r2, r1
 8005af2:	4283      	cmp	r3, r0
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	d1e0      	bne.n	8005aba <_free_r+0x22>
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	6053      	str	r3, [r2, #4]
 8005afe:	4408      	add	r0, r1
 8005b00:	6010      	str	r0, [r2, #0]
 8005b02:	e7da      	b.n	8005aba <_free_r+0x22>
 8005b04:	d902      	bls.n	8005b0c <_free_r+0x74>
 8005b06:	230c      	movs	r3, #12
 8005b08:	602b      	str	r3, [r5, #0]
 8005b0a:	e7d6      	b.n	8005aba <_free_r+0x22>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	1821      	adds	r1, r4, r0
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf04      	itt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	bf04      	itt	eq
 8005b1c:	1809      	addeq	r1, r1, r0
 8005b1e:	6021      	streq	r1, [r4, #0]
 8005b20:	6054      	str	r4, [r2, #4]
 8005b22:	e7ca      	b.n	8005aba <_free_r+0x22>
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
 8005b26:	bf00      	nop
 8005b28:	200062b8 	.word	0x200062b8

08005b2c <sbrk_aligned>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005b6c <sbrk_aligned+0x40>)
 8005b30:	460c      	mov	r4, r1
 8005b32:	6831      	ldr	r1, [r6, #0]
 8005b34:	4605      	mov	r5, r0
 8005b36:	b911      	cbnz	r1, 8005b3e <sbrk_aligned+0x12>
 8005b38:	f000 fba4 	bl	8006284 <_sbrk_r>
 8005b3c:	6030      	str	r0, [r6, #0]
 8005b3e:	4621      	mov	r1, r4
 8005b40:	4628      	mov	r0, r5
 8005b42:	f000 fb9f 	bl	8006284 <_sbrk_r>
 8005b46:	1c43      	adds	r3, r0, #1
 8005b48:	d103      	bne.n	8005b52 <sbrk_aligned+0x26>
 8005b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8005b4e:	4620      	mov	r0, r4
 8005b50:	bd70      	pop	{r4, r5, r6, pc}
 8005b52:	1cc4      	adds	r4, r0, #3
 8005b54:	f024 0403 	bic.w	r4, r4, #3
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d0f8      	beq.n	8005b4e <sbrk_aligned+0x22>
 8005b5c:	1a21      	subs	r1, r4, r0
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f000 fb90 	bl	8006284 <_sbrk_r>
 8005b64:	3001      	adds	r0, #1
 8005b66:	d1f2      	bne.n	8005b4e <sbrk_aligned+0x22>
 8005b68:	e7ef      	b.n	8005b4a <sbrk_aligned+0x1e>
 8005b6a:	bf00      	nop
 8005b6c:	200062b4 	.word	0x200062b4

08005b70 <_malloc_r>:
 8005b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b74:	1ccd      	adds	r5, r1, #3
 8005b76:	f025 0503 	bic.w	r5, r5, #3
 8005b7a:	3508      	adds	r5, #8
 8005b7c:	2d0c      	cmp	r5, #12
 8005b7e:	bf38      	it	cc
 8005b80:	250c      	movcc	r5, #12
 8005b82:	2d00      	cmp	r5, #0
 8005b84:	4606      	mov	r6, r0
 8005b86:	db01      	blt.n	8005b8c <_malloc_r+0x1c>
 8005b88:	42a9      	cmp	r1, r5
 8005b8a:	d904      	bls.n	8005b96 <_malloc_r+0x26>
 8005b8c:	230c      	movs	r3, #12
 8005b8e:	6033      	str	r3, [r6, #0]
 8005b90:	2000      	movs	r0, #0
 8005b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c6c <_malloc_r+0xfc>
 8005b9a:	f000 f869 	bl	8005c70 <__malloc_lock>
 8005b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba2:	461c      	mov	r4, r3
 8005ba4:	bb44      	cbnz	r4, 8005bf8 <_malloc_r+0x88>
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	4630      	mov	r0, r6
 8005baa:	f7ff ffbf 	bl	8005b2c <sbrk_aligned>
 8005bae:	1c43      	adds	r3, r0, #1
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	d158      	bne.n	8005c66 <_malloc_r+0xf6>
 8005bb4:	f8d8 4000 	ldr.w	r4, [r8]
 8005bb8:	4627      	mov	r7, r4
 8005bba:	2f00      	cmp	r7, #0
 8005bbc:	d143      	bne.n	8005c46 <_malloc_r+0xd6>
 8005bbe:	2c00      	cmp	r4, #0
 8005bc0:	d04b      	beq.n	8005c5a <_malloc_r+0xea>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	eb04 0903 	add.w	r9, r4, r3
 8005bcc:	f000 fb5a 	bl	8006284 <_sbrk_r>
 8005bd0:	4581      	cmp	r9, r0
 8005bd2:	d142      	bne.n	8005c5a <_malloc_r+0xea>
 8005bd4:	6821      	ldr	r1, [r4, #0]
 8005bd6:	1a6d      	subs	r5, r5, r1
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7ff ffa6 	bl	8005b2c <sbrk_aligned>
 8005be0:	3001      	adds	r0, #1
 8005be2:	d03a      	beq.n	8005c5a <_malloc_r+0xea>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	442b      	add	r3, r5
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	f8d8 3000 	ldr.w	r3, [r8]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	bb62      	cbnz	r2, 8005c4c <_malloc_r+0xdc>
 8005bf2:	f8c8 7000 	str.w	r7, [r8]
 8005bf6:	e00f      	b.n	8005c18 <_malloc_r+0xa8>
 8005bf8:	6822      	ldr	r2, [r4, #0]
 8005bfa:	1b52      	subs	r2, r2, r5
 8005bfc:	d420      	bmi.n	8005c40 <_malloc_r+0xd0>
 8005bfe:	2a0b      	cmp	r2, #11
 8005c00:	d917      	bls.n	8005c32 <_malloc_r+0xc2>
 8005c02:	1961      	adds	r1, r4, r5
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	6025      	str	r5, [r4, #0]
 8005c08:	bf18      	it	ne
 8005c0a:	6059      	strne	r1, [r3, #4]
 8005c0c:	6863      	ldr	r3, [r4, #4]
 8005c0e:	bf08      	it	eq
 8005c10:	f8c8 1000 	streq.w	r1, [r8]
 8005c14:	5162      	str	r2, [r4, r5]
 8005c16:	604b      	str	r3, [r1, #4]
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f000 f82f 	bl	8005c7c <__malloc_unlock>
 8005c1e:	f104 000b 	add.w	r0, r4, #11
 8005c22:	1d23      	adds	r3, r4, #4
 8005c24:	f020 0007 	bic.w	r0, r0, #7
 8005c28:	1ac2      	subs	r2, r0, r3
 8005c2a:	bf1c      	itt	ne
 8005c2c:	1a1b      	subne	r3, r3, r0
 8005c2e:	50a3      	strne	r3, [r4, r2]
 8005c30:	e7af      	b.n	8005b92 <_malloc_r+0x22>
 8005c32:	6862      	ldr	r2, [r4, #4]
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	bf0c      	ite	eq
 8005c38:	f8c8 2000 	streq.w	r2, [r8]
 8005c3c:	605a      	strne	r2, [r3, #4]
 8005c3e:	e7eb      	b.n	8005c18 <_malloc_r+0xa8>
 8005c40:	4623      	mov	r3, r4
 8005c42:	6864      	ldr	r4, [r4, #4]
 8005c44:	e7ae      	b.n	8005ba4 <_malloc_r+0x34>
 8005c46:	463c      	mov	r4, r7
 8005c48:	687f      	ldr	r7, [r7, #4]
 8005c4a:	e7b6      	b.n	8005bba <_malloc_r+0x4a>
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d1fb      	bne.n	8005c4c <_malloc_r+0xdc>
 8005c54:	2300      	movs	r3, #0
 8005c56:	6053      	str	r3, [r2, #4]
 8005c58:	e7de      	b.n	8005c18 <_malloc_r+0xa8>
 8005c5a:	230c      	movs	r3, #12
 8005c5c:	6033      	str	r3, [r6, #0]
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f000 f80c 	bl	8005c7c <__malloc_unlock>
 8005c64:	e794      	b.n	8005b90 <_malloc_r+0x20>
 8005c66:	6005      	str	r5, [r0, #0]
 8005c68:	e7d6      	b.n	8005c18 <_malloc_r+0xa8>
 8005c6a:	bf00      	nop
 8005c6c:	200062b8 	.word	0x200062b8

08005c70 <__malloc_lock>:
 8005c70:	4801      	ldr	r0, [pc, #4]	@ (8005c78 <__malloc_lock+0x8>)
 8005c72:	f7ff bf0f 	b.w	8005a94 <__retarget_lock_acquire_recursive>
 8005c76:	bf00      	nop
 8005c78:	200062b0 	.word	0x200062b0

08005c7c <__malloc_unlock>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	@ (8005c84 <__malloc_unlock+0x8>)
 8005c7e:	f7ff bf0a 	b.w	8005a96 <__retarget_lock_release_recursive>
 8005c82:	bf00      	nop
 8005c84:	200062b0 	.word	0x200062b0

08005c88 <__ssputs_r>:
 8005c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	688e      	ldr	r6, [r1, #8]
 8005c8e:	461f      	mov	r7, r3
 8005c90:	42be      	cmp	r6, r7
 8005c92:	680b      	ldr	r3, [r1, #0]
 8005c94:	4682      	mov	sl, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	4690      	mov	r8, r2
 8005c9a:	d82d      	bhi.n	8005cf8 <__ssputs_r+0x70>
 8005c9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ca0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ca4:	d026      	beq.n	8005cf4 <__ssputs_r+0x6c>
 8005ca6:	6965      	ldr	r5, [r4, #20]
 8005ca8:	6909      	ldr	r1, [r1, #16]
 8005caa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cae:	eba3 0901 	sub.w	r9, r3, r1
 8005cb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cb6:	1c7b      	adds	r3, r7, #1
 8005cb8:	444b      	add	r3, r9
 8005cba:	106d      	asrs	r5, r5, #1
 8005cbc:	429d      	cmp	r5, r3
 8005cbe:	bf38      	it	cc
 8005cc0:	461d      	movcc	r5, r3
 8005cc2:	0553      	lsls	r3, r2, #21
 8005cc4:	d527      	bpl.n	8005d16 <__ssputs_r+0x8e>
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f7ff ff52 	bl	8005b70 <_malloc_r>
 8005ccc:	4606      	mov	r6, r0
 8005cce:	b360      	cbz	r0, 8005d2a <__ssputs_r+0xa2>
 8005cd0:	6921      	ldr	r1, [r4, #16]
 8005cd2:	464a      	mov	r2, r9
 8005cd4:	f000 fae6 	bl	80062a4 <memcpy>
 8005cd8:	89a3      	ldrh	r3, [r4, #12]
 8005cda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce2:	81a3      	strh	r3, [r4, #12]
 8005ce4:	6126      	str	r6, [r4, #16]
 8005ce6:	6165      	str	r5, [r4, #20]
 8005ce8:	444e      	add	r6, r9
 8005cea:	eba5 0509 	sub.w	r5, r5, r9
 8005cee:	6026      	str	r6, [r4, #0]
 8005cf0:	60a5      	str	r5, [r4, #8]
 8005cf2:	463e      	mov	r6, r7
 8005cf4:	42be      	cmp	r6, r7
 8005cf6:	d900      	bls.n	8005cfa <__ssputs_r+0x72>
 8005cf8:	463e      	mov	r6, r7
 8005cfa:	6820      	ldr	r0, [r4, #0]
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	4641      	mov	r1, r8
 8005d00:	f000 faa6 	bl	8006250 <memmove>
 8005d04:	68a3      	ldr	r3, [r4, #8]
 8005d06:	1b9b      	subs	r3, r3, r6
 8005d08:	60a3      	str	r3, [r4, #8]
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	4433      	add	r3, r6
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	2000      	movs	r0, #0
 8005d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d16:	462a      	mov	r2, r5
 8005d18:	f000 fad2 	bl	80062c0 <_realloc_r>
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d1e0      	bne.n	8005ce4 <__ssputs_r+0x5c>
 8005d22:	6921      	ldr	r1, [r4, #16]
 8005d24:	4650      	mov	r0, sl
 8005d26:	f7ff feb7 	bl	8005a98 <_free_r>
 8005d2a:	230c      	movs	r3, #12
 8005d2c:	f8ca 3000 	str.w	r3, [sl]
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3c:	e7e9      	b.n	8005d12 <__ssputs_r+0x8a>
	...

08005d40 <_svfiprintf_r>:
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	4698      	mov	r8, r3
 8005d46:	898b      	ldrh	r3, [r1, #12]
 8005d48:	061b      	lsls	r3, r3, #24
 8005d4a:	b09d      	sub	sp, #116	@ 0x74
 8005d4c:	4607      	mov	r7, r0
 8005d4e:	460d      	mov	r5, r1
 8005d50:	4614      	mov	r4, r2
 8005d52:	d510      	bpl.n	8005d76 <_svfiprintf_r+0x36>
 8005d54:	690b      	ldr	r3, [r1, #16]
 8005d56:	b973      	cbnz	r3, 8005d76 <_svfiprintf_r+0x36>
 8005d58:	2140      	movs	r1, #64	@ 0x40
 8005d5a:	f7ff ff09 	bl	8005b70 <_malloc_r>
 8005d5e:	6028      	str	r0, [r5, #0]
 8005d60:	6128      	str	r0, [r5, #16]
 8005d62:	b930      	cbnz	r0, 8005d72 <_svfiprintf_r+0x32>
 8005d64:	230c      	movs	r3, #12
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	b01d      	add	sp, #116	@ 0x74
 8005d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d72:	2340      	movs	r3, #64	@ 0x40
 8005d74:	616b      	str	r3, [r5, #20]
 8005d76:	2300      	movs	r3, #0
 8005d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d7a:	2320      	movs	r3, #32
 8005d7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d84:	2330      	movs	r3, #48	@ 0x30
 8005d86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f24 <_svfiprintf_r+0x1e4>
 8005d8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d8e:	f04f 0901 	mov.w	r9, #1
 8005d92:	4623      	mov	r3, r4
 8005d94:	469a      	mov	sl, r3
 8005d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d9a:	b10a      	cbz	r2, 8005da0 <_svfiprintf_r+0x60>
 8005d9c:	2a25      	cmp	r2, #37	@ 0x25
 8005d9e:	d1f9      	bne.n	8005d94 <_svfiprintf_r+0x54>
 8005da0:	ebba 0b04 	subs.w	fp, sl, r4
 8005da4:	d00b      	beq.n	8005dbe <_svfiprintf_r+0x7e>
 8005da6:	465b      	mov	r3, fp
 8005da8:	4622      	mov	r2, r4
 8005daa:	4629      	mov	r1, r5
 8005dac:	4638      	mov	r0, r7
 8005dae:	f7ff ff6b 	bl	8005c88 <__ssputs_r>
 8005db2:	3001      	adds	r0, #1
 8005db4:	f000 80a7 	beq.w	8005f06 <_svfiprintf_r+0x1c6>
 8005db8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dba:	445a      	add	r2, fp
 8005dbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 809f 	beq.w	8005f06 <_svfiprintf_r+0x1c6>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f04f 32ff 	mov.w	r2, #4294967295
 8005dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dd2:	f10a 0a01 	add.w	sl, sl, #1
 8005dd6:	9304      	str	r3, [sp, #16]
 8005dd8:	9307      	str	r3, [sp, #28]
 8005dda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dde:	931a      	str	r3, [sp, #104]	@ 0x68
 8005de0:	4654      	mov	r4, sl
 8005de2:	2205      	movs	r2, #5
 8005de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de8:	484e      	ldr	r0, [pc, #312]	@ (8005f24 <_svfiprintf_r+0x1e4>)
 8005dea:	f7fa f9f9 	bl	80001e0 <memchr>
 8005dee:	9a04      	ldr	r2, [sp, #16]
 8005df0:	b9d8      	cbnz	r0, 8005e2a <_svfiprintf_r+0xea>
 8005df2:	06d0      	lsls	r0, r2, #27
 8005df4:	bf44      	itt	mi
 8005df6:	2320      	movmi	r3, #32
 8005df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dfc:	0711      	lsls	r1, r2, #28
 8005dfe:	bf44      	itt	mi
 8005e00:	232b      	movmi	r3, #43	@ 0x2b
 8005e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e06:	f89a 3000 	ldrb.w	r3, [sl]
 8005e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e0c:	d015      	beq.n	8005e3a <_svfiprintf_r+0xfa>
 8005e0e:	9a07      	ldr	r2, [sp, #28]
 8005e10:	4654      	mov	r4, sl
 8005e12:	2000      	movs	r0, #0
 8005e14:	f04f 0c0a 	mov.w	ip, #10
 8005e18:	4621      	mov	r1, r4
 8005e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e1e:	3b30      	subs	r3, #48	@ 0x30
 8005e20:	2b09      	cmp	r3, #9
 8005e22:	d94b      	bls.n	8005ebc <_svfiprintf_r+0x17c>
 8005e24:	b1b0      	cbz	r0, 8005e54 <_svfiprintf_r+0x114>
 8005e26:	9207      	str	r2, [sp, #28]
 8005e28:	e014      	b.n	8005e54 <_svfiprintf_r+0x114>
 8005e2a:	eba0 0308 	sub.w	r3, r0, r8
 8005e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e32:	4313      	orrs	r3, r2
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	46a2      	mov	sl, r4
 8005e38:	e7d2      	b.n	8005de0 <_svfiprintf_r+0xa0>
 8005e3a:	9b03      	ldr	r3, [sp, #12]
 8005e3c:	1d19      	adds	r1, r3, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	9103      	str	r1, [sp, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bfbb      	ittet	lt
 8005e46:	425b      	neglt	r3, r3
 8005e48:	f042 0202 	orrlt.w	r2, r2, #2
 8005e4c:	9307      	strge	r3, [sp, #28]
 8005e4e:	9307      	strlt	r3, [sp, #28]
 8005e50:	bfb8      	it	lt
 8005e52:	9204      	strlt	r2, [sp, #16]
 8005e54:	7823      	ldrb	r3, [r4, #0]
 8005e56:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e58:	d10a      	bne.n	8005e70 <_svfiprintf_r+0x130>
 8005e5a:	7863      	ldrb	r3, [r4, #1]
 8005e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e5e:	d132      	bne.n	8005ec6 <_svfiprintf_r+0x186>
 8005e60:	9b03      	ldr	r3, [sp, #12]
 8005e62:	1d1a      	adds	r2, r3, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	9203      	str	r2, [sp, #12]
 8005e68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e6c:	3402      	adds	r4, #2
 8005e6e:	9305      	str	r3, [sp, #20]
 8005e70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f34 <_svfiprintf_r+0x1f4>
 8005e74:	7821      	ldrb	r1, [r4, #0]
 8005e76:	2203      	movs	r2, #3
 8005e78:	4650      	mov	r0, sl
 8005e7a:	f7fa f9b1 	bl	80001e0 <memchr>
 8005e7e:	b138      	cbz	r0, 8005e90 <_svfiprintf_r+0x150>
 8005e80:	9b04      	ldr	r3, [sp, #16]
 8005e82:	eba0 000a 	sub.w	r0, r0, sl
 8005e86:	2240      	movs	r2, #64	@ 0x40
 8005e88:	4082      	lsls	r2, r0
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	3401      	adds	r4, #1
 8005e8e:	9304      	str	r3, [sp, #16]
 8005e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e94:	4824      	ldr	r0, [pc, #144]	@ (8005f28 <_svfiprintf_r+0x1e8>)
 8005e96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e9a:	2206      	movs	r2, #6
 8005e9c:	f7fa f9a0 	bl	80001e0 <memchr>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d036      	beq.n	8005f12 <_svfiprintf_r+0x1d2>
 8005ea4:	4b21      	ldr	r3, [pc, #132]	@ (8005f2c <_svfiprintf_r+0x1ec>)
 8005ea6:	bb1b      	cbnz	r3, 8005ef0 <_svfiprintf_r+0x1b0>
 8005ea8:	9b03      	ldr	r3, [sp, #12]
 8005eaa:	3307      	adds	r3, #7
 8005eac:	f023 0307 	bic.w	r3, r3, #7
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	9303      	str	r3, [sp, #12]
 8005eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb6:	4433      	add	r3, r6
 8005eb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eba:	e76a      	b.n	8005d92 <_svfiprintf_r+0x52>
 8005ebc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	e7a8      	b.n	8005e18 <_svfiprintf_r+0xd8>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	3401      	adds	r4, #1
 8005eca:	9305      	str	r3, [sp, #20]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f04f 0c0a 	mov.w	ip, #10
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ed8:	3a30      	subs	r2, #48	@ 0x30
 8005eda:	2a09      	cmp	r2, #9
 8005edc:	d903      	bls.n	8005ee6 <_svfiprintf_r+0x1a6>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0c6      	beq.n	8005e70 <_svfiprintf_r+0x130>
 8005ee2:	9105      	str	r1, [sp, #20]
 8005ee4:	e7c4      	b.n	8005e70 <_svfiprintf_r+0x130>
 8005ee6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eea:	4604      	mov	r4, r0
 8005eec:	2301      	movs	r3, #1
 8005eee:	e7f0      	b.n	8005ed2 <_svfiprintf_r+0x192>
 8005ef0:	ab03      	add	r3, sp, #12
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	462a      	mov	r2, r5
 8005ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8005f30 <_svfiprintf_r+0x1f0>)
 8005ef8:	a904      	add	r1, sp, #16
 8005efa:	4638      	mov	r0, r7
 8005efc:	f3af 8000 	nop.w
 8005f00:	1c42      	adds	r2, r0, #1
 8005f02:	4606      	mov	r6, r0
 8005f04:	d1d6      	bne.n	8005eb4 <_svfiprintf_r+0x174>
 8005f06:	89ab      	ldrh	r3, [r5, #12]
 8005f08:	065b      	lsls	r3, r3, #25
 8005f0a:	f53f af2d 	bmi.w	8005d68 <_svfiprintf_r+0x28>
 8005f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f10:	e72c      	b.n	8005d6c <_svfiprintf_r+0x2c>
 8005f12:	ab03      	add	r3, sp, #12
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	462a      	mov	r2, r5
 8005f18:	4b05      	ldr	r3, [pc, #20]	@ (8005f30 <_svfiprintf_r+0x1f0>)
 8005f1a:	a904      	add	r1, sp, #16
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	f000 f879 	bl	8006014 <_printf_i>
 8005f22:	e7ed      	b.n	8005f00 <_svfiprintf_r+0x1c0>
 8005f24:	0802388c 	.word	0x0802388c
 8005f28:	08023896 	.word	0x08023896
 8005f2c:	00000000 	.word	0x00000000
 8005f30:	08005c89 	.word	0x08005c89
 8005f34:	08023892 	.word	0x08023892

08005f38 <_printf_common>:
 8005f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	4698      	mov	r8, r3
 8005f40:	688a      	ldr	r2, [r1, #8]
 8005f42:	690b      	ldr	r3, [r1, #16]
 8005f44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	bfb8      	it	lt
 8005f4c:	4613      	movlt	r3, r2
 8005f4e:	6033      	str	r3, [r6, #0]
 8005f50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f54:	4607      	mov	r7, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	b10a      	cbz	r2, 8005f5e <_printf_common+0x26>
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	0699      	lsls	r1, r3, #26
 8005f62:	bf42      	ittt	mi
 8005f64:	6833      	ldrmi	r3, [r6, #0]
 8005f66:	3302      	addmi	r3, #2
 8005f68:	6033      	strmi	r3, [r6, #0]
 8005f6a:	6825      	ldr	r5, [r4, #0]
 8005f6c:	f015 0506 	ands.w	r5, r5, #6
 8005f70:	d106      	bne.n	8005f80 <_printf_common+0x48>
 8005f72:	f104 0a19 	add.w	sl, r4, #25
 8005f76:	68e3      	ldr	r3, [r4, #12]
 8005f78:	6832      	ldr	r2, [r6, #0]
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	42ab      	cmp	r3, r5
 8005f7e:	dc26      	bgt.n	8005fce <_printf_common+0x96>
 8005f80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	3b00      	subs	r3, #0
 8005f88:	bf18      	it	ne
 8005f8a:	2301      	movne	r3, #1
 8005f8c:	0692      	lsls	r2, r2, #26
 8005f8e:	d42b      	bmi.n	8005fe8 <_printf_common+0xb0>
 8005f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f94:	4641      	mov	r1, r8
 8005f96:	4638      	mov	r0, r7
 8005f98:	47c8      	blx	r9
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	d01e      	beq.n	8005fdc <_printf_common+0xa4>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	6922      	ldr	r2, [r4, #16]
 8005fa2:	f003 0306 	and.w	r3, r3, #6
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	bf02      	ittt	eq
 8005faa:	68e5      	ldreq	r5, [r4, #12]
 8005fac:	6833      	ldreq	r3, [r6, #0]
 8005fae:	1aed      	subeq	r5, r5, r3
 8005fb0:	68a3      	ldr	r3, [r4, #8]
 8005fb2:	bf0c      	ite	eq
 8005fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fb8:	2500      	movne	r5, #0
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	bfc4      	itt	gt
 8005fbe:	1a9b      	subgt	r3, r3, r2
 8005fc0:	18ed      	addgt	r5, r5, r3
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	341a      	adds	r4, #26
 8005fc6:	42b5      	cmp	r5, r6
 8005fc8:	d11a      	bne.n	8006000 <_printf_common+0xc8>
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e008      	b.n	8005fe0 <_printf_common+0xa8>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4652      	mov	r2, sl
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	47c8      	blx	r9
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d103      	bne.n	8005fe4 <_printf_common+0xac>
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	e7c6      	b.n	8005f76 <_printf_common+0x3e>
 8005fe8:	18e1      	adds	r1, r4, r3
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	2030      	movs	r0, #48	@ 0x30
 8005fee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ff2:	4422      	add	r2, r4
 8005ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	e7c7      	b.n	8005f90 <_printf_common+0x58>
 8006000:	2301      	movs	r3, #1
 8006002:	4622      	mov	r2, r4
 8006004:	4641      	mov	r1, r8
 8006006:	4638      	mov	r0, r7
 8006008:	47c8      	blx	r9
 800600a:	3001      	adds	r0, #1
 800600c:	d0e6      	beq.n	8005fdc <_printf_common+0xa4>
 800600e:	3601      	adds	r6, #1
 8006010:	e7d9      	b.n	8005fc6 <_printf_common+0x8e>
	...

08006014 <_printf_i>:
 8006014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006018:	7e0f      	ldrb	r7, [r1, #24]
 800601a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800601c:	2f78      	cmp	r7, #120	@ 0x78
 800601e:	4691      	mov	r9, r2
 8006020:	4680      	mov	r8, r0
 8006022:	460c      	mov	r4, r1
 8006024:	469a      	mov	sl, r3
 8006026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800602a:	d807      	bhi.n	800603c <_printf_i+0x28>
 800602c:	2f62      	cmp	r7, #98	@ 0x62
 800602e:	d80a      	bhi.n	8006046 <_printf_i+0x32>
 8006030:	2f00      	cmp	r7, #0
 8006032:	f000 80d1 	beq.w	80061d8 <_printf_i+0x1c4>
 8006036:	2f58      	cmp	r7, #88	@ 0x58
 8006038:	f000 80b8 	beq.w	80061ac <_printf_i+0x198>
 800603c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006044:	e03a      	b.n	80060bc <_printf_i+0xa8>
 8006046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800604a:	2b15      	cmp	r3, #21
 800604c:	d8f6      	bhi.n	800603c <_printf_i+0x28>
 800604e:	a101      	add	r1, pc, #4	@ (adr r1, 8006054 <_printf_i+0x40>)
 8006050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006054:	080060ad 	.word	0x080060ad
 8006058:	080060c1 	.word	0x080060c1
 800605c:	0800603d 	.word	0x0800603d
 8006060:	0800603d 	.word	0x0800603d
 8006064:	0800603d 	.word	0x0800603d
 8006068:	0800603d 	.word	0x0800603d
 800606c:	080060c1 	.word	0x080060c1
 8006070:	0800603d 	.word	0x0800603d
 8006074:	0800603d 	.word	0x0800603d
 8006078:	0800603d 	.word	0x0800603d
 800607c:	0800603d 	.word	0x0800603d
 8006080:	080061bf 	.word	0x080061bf
 8006084:	080060eb 	.word	0x080060eb
 8006088:	08006179 	.word	0x08006179
 800608c:	0800603d 	.word	0x0800603d
 8006090:	0800603d 	.word	0x0800603d
 8006094:	080061e1 	.word	0x080061e1
 8006098:	0800603d 	.word	0x0800603d
 800609c:	080060eb 	.word	0x080060eb
 80060a0:	0800603d 	.word	0x0800603d
 80060a4:	0800603d 	.word	0x0800603d
 80060a8:	08006181 	.word	0x08006181
 80060ac:	6833      	ldr	r3, [r6, #0]
 80060ae:	1d1a      	adds	r2, r3, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6032      	str	r2, [r6, #0]
 80060b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060bc:	2301      	movs	r3, #1
 80060be:	e09c      	b.n	80061fa <_printf_i+0x1e6>
 80060c0:	6833      	ldr	r3, [r6, #0]
 80060c2:	6820      	ldr	r0, [r4, #0]
 80060c4:	1d19      	adds	r1, r3, #4
 80060c6:	6031      	str	r1, [r6, #0]
 80060c8:	0606      	lsls	r6, r0, #24
 80060ca:	d501      	bpl.n	80060d0 <_printf_i+0xbc>
 80060cc:	681d      	ldr	r5, [r3, #0]
 80060ce:	e003      	b.n	80060d8 <_printf_i+0xc4>
 80060d0:	0645      	lsls	r5, r0, #25
 80060d2:	d5fb      	bpl.n	80060cc <_printf_i+0xb8>
 80060d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060d8:	2d00      	cmp	r5, #0
 80060da:	da03      	bge.n	80060e4 <_printf_i+0xd0>
 80060dc:	232d      	movs	r3, #45	@ 0x2d
 80060de:	426d      	negs	r5, r5
 80060e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060e4:	4858      	ldr	r0, [pc, #352]	@ (8006248 <_printf_i+0x234>)
 80060e6:	230a      	movs	r3, #10
 80060e8:	e011      	b.n	800610e <_printf_i+0xfa>
 80060ea:	6821      	ldr	r1, [r4, #0]
 80060ec:	6833      	ldr	r3, [r6, #0]
 80060ee:	0608      	lsls	r0, r1, #24
 80060f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80060f4:	d402      	bmi.n	80060fc <_printf_i+0xe8>
 80060f6:	0649      	lsls	r1, r1, #25
 80060f8:	bf48      	it	mi
 80060fa:	b2ad      	uxthmi	r5, r5
 80060fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80060fe:	4852      	ldr	r0, [pc, #328]	@ (8006248 <_printf_i+0x234>)
 8006100:	6033      	str	r3, [r6, #0]
 8006102:	bf14      	ite	ne
 8006104:	230a      	movne	r3, #10
 8006106:	2308      	moveq	r3, #8
 8006108:	2100      	movs	r1, #0
 800610a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800610e:	6866      	ldr	r6, [r4, #4]
 8006110:	60a6      	str	r6, [r4, #8]
 8006112:	2e00      	cmp	r6, #0
 8006114:	db05      	blt.n	8006122 <_printf_i+0x10e>
 8006116:	6821      	ldr	r1, [r4, #0]
 8006118:	432e      	orrs	r6, r5
 800611a:	f021 0104 	bic.w	r1, r1, #4
 800611e:	6021      	str	r1, [r4, #0]
 8006120:	d04b      	beq.n	80061ba <_printf_i+0x1a6>
 8006122:	4616      	mov	r6, r2
 8006124:	fbb5 f1f3 	udiv	r1, r5, r3
 8006128:	fb03 5711 	mls	r7, r3, r1, r5
 800612c:	5dc7      	ldrb	r7, [r0, r7]
 800612e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006132:	462f      	mov	r7, r5
 8006134:	42bb      	cmp	r3, r7
 8006136:	460d      	mov	r5, r1
 8006138:	d9f4      	bls.n	8006124 <_printf_i+0x110>
 800613a:	2b08      	cmp	r3, #8
 800613c:	d10b      	bne.n	8006156 <_printf_i+0x142>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	07df      	lsls	r7, r3, #31
 8006142:	d508      	bpl.n	8006156 <_printf_i+0x142>
 8006144:	6923      	ldr	r3, [r4, #16]
 8006146:	6861      	ldr	r1, [r4, #4]
 8006148:	4299      	cmp	r1, r3
 800614a:	bfde      	ittt	le
 800614c:	2330      	movle	r3, #48	@ 0x30
 800614e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006152:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006156:	1b92      	subs	r2, r2, r6
 8006158:	6122      	str	r2, [r4, #16]
 800615a:	f8cd a000 	str.w	sl, [sp]
 800615e:	464b      	mov	r3, r9
 8006160:	aa03      	add	r2, sp, #12
 8006162:	4621      	mov	r1, r4
 8006164:	4640      	mov	r0, r8
 8006166:	f7ff fee7 	bl	8005f38 <_printf_common>
 800616a:	3001      	adds	r0, #1
 800616c:	d14a      	bne.n	8006204 <_printf_i+0x1f0>
 800616e:	f04f 30ff 	mov.w	r0, #4294967295
 8006172:	b004      	add	sp, #16
 8006174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	f043 0320 	orr.w	r3, r3, #32
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	4832      	ldr	r0, [pc, #200]	@ (800624c <_printf_i+0x238>)
 8006182:	2778      	movs	r7, #120	@ 0x78
 8006184:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	6831      	ldr	r1, [r6, #0]
 800618c:	061f      	lsls	r7, r3, #24
 800618e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006192:	d402      	bmi.n	800619a <_printf_i+0x186>
 8006194:	065f      	lsls	r7, r3, #25
 8006196:	bf48      	it	mi
 8006198:	b2ad      	uxthmi	r5, r5
 800619a:	6031      	str	r1, [r6, #0]
 800619c:	07d9      	lsls	r1, r3, #31
 800619e:	bf44      	itt	mi
 80061a0:	f043 0320 	orrmi.w	r3, r3, #32
 80061a4:	6023      	strmi	r3, [r4, #0]
 80061a6:	b11d      	cbz	r5, 80061b0 <_printf_i+0x19c>
 80061a8:	2310      	movs	r3, #16
 80061aa:	e7ad      	b.n	8006108 <_printf_i+0xf4>
 80061ac:	4826      	ldr	r0, [pc, #152]	@ (8006248 <_printf_i+0x234>)
 80061ae:	e7e9      	b.n	8006184 <_printf_i+0x170>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	f023 0320 	bic.w	r3, r3, #32
 80061b6:	6023      	str	r3, [r4, #0]
 80061b8:	e7f6      	b.n	80061a8 <_printf_i+0x194>
 80061ba:	4616      	mov	r6, r2
 80061bc:	e7bd      	b.n	800613a <_printf_i+0x126>
 80061be:	6833      	ldr	r3, [r6, #0]
 80061c0:	6825      	ldr	r5, [r4, #0]
 80061c2:	6961      	ldr	r1, [r4, #20]
 80061c4:	1d18      	adds	r0, r3, #4
 80061c6:	6030      	str	r0, [r6, #0]
 80061c8:	062e      	lsls	r6, r5, #24
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	d501      	bpl.n	80061d2 <_printf_i+0x1be>
 80061ce:	6019      	str	r1, [r3, #0]
 80061d0:	e002      	b.n	80061d8 <_printf_i+0x1c4>
 80061d2:	0668      	lsls	r0, r5, #25
 80061d4:	d5fb      	bpl.n	80061ce <_printf_i+0x1ba>
 80061d6:	8019      	strh	r1, [r3, #0]
 80061d8:	2300      	movs	r3, #0
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	4616      	mov	r6, r2
 80061de:	e7bc      	b.n	800615a <_printf_i+0x146>
 80061e0:	6833      	ldr	r3, [r6, #0]
 80061e2:	1d1a      	adds	r2, r3, #4
 80061e4:	6032      	str	r2, [r6, #0]
 80061e6:	681e      	ldr	r6, [r3, #0]
 80061e8:	6862      	ldr	r2, [r4, #4]
 80061ea:	2100      	movs	r1, #0
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7f9 fff7 	bl	80001e0 <memchr>
 80061f2:	b108      	cbz	r0, 80061f8 <_printf_i+0x1e4>
 80061f4:	1b80      	subs	r0, r0, r6
 80061f6:	6060      	str	r0, [r4, #4]
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	6123      	str	r3, [r4, #16]
 80061fc:	2300      	movs	r3, #0
 80061fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006202:	e7aa      	b.n	800615a <_printf_i+0x146>
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	4632      	mov	r2, r6
 8006208:	4649      	mov	r1, r9
 800620a:	4640      	mov	r0, r8
 800620c:	47d0      	blx	sl
 800620e:	3001      	adds	r0, #1
 8006210:	d0ad      	beq.n	800616e <_printf_i+0x15a>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	079b      	lsls	r3, r3, #30
 8006216:	d413      	bmi.n	8006240 <_printf_i+0x22c>
 8006218:	68e0      	ldr	r0, [r4, #12]
 800621a:	9b03      	ldr	r3, [sp, #12]
 800621c:	4298      	cmp	r0, r3
 800621e:	bfb8      	it	lt
 8006220:	4618      	movlt	r0, r3
 8006222:	e7a6      	b.n	8006172 <_printf_i+0x15e>
 8006224:	2301      	movs	r3, #1
 8006226:	4632      	mov	r2, r6
 8006228:	4649      	mov	r1, r9
 800622a:	4640      	mov	r0, r8
 800622c:	47d0      	blx	sl
 800622e:	3001      	adds	r0, #1
 8006230:	d09d      	beq.n	800616e <_printf_i+0x15a>
 8006232:	3501      	adds	r5, #1
 8006234:	68e3      	ldr	r3, [r4, #12]
 8006236:	9903      	ldr	r1, [sp, #12]
 8006238:	1a5b      	subs	r3, r3, r1
 800623a:	42ab      	cmp	r3, r5
 800623c:	dcf2      	bgt.n	8006224 <_printf_i+0x210>
 800623e:	e7eb      	b.n	8006218 <_printf_i+0x204>
 8006240:	2500      	movs	r5, #0
 8006242:	f104 0619 	add.w	r6, r4, #25
 8006246:	e7f5      	b.n	8006234 <_printf_i+0x220>
 8006248:	0802389d 	.word	0x0802389d
 800624c:	080238ae 	.word	0x080238ae

08006250 <memmove>:
 8006250:	4288      	cmp	r0, r1
 8006252:	b510      	push	{r4, lr}
 8006254:	eb01 0402 	add.w	r4, r1, r2
 8006258:	d902      	bls.n	8006260 <memmove+0x10>
 800625a:	4284      	cmp	r4, r0
 800625c:	4623      	mov	r3, r4
 800625e:	d807      	bhi.n	8006270 <memmove+0x20>
 8006260:	1e43      	subs	r3, r0, #1
 8006262:	42a1      	cmp	r1, r4
 8006264:	d008      	beq.n	8006278 <memmove+0x28>
 8006266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800626a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800626e:	e7f8      	b.n	8006262 <memmove+0x12>
 8006270:	4402      	add	r2, r0
 8006272:	4601      	mov	r1, r0
 8006274:	428a      	cmp	r2, r1
 8006276:	d100      	bne.n	800627a <memmove+0x2a>
 8006278:	bd10      	pop	{r4, pc}
 800627a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800627e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006282:	e7f7      	b.n	8006274 <memmove+0x24>

08006284 <_sbrk_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d06      	ldr	r5, [pc, #24]	@ (80062a0 <_sbrk_r+0x1c>)
 8006288:	2300      	movs	r3, #0
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	f7fa fd2a 	bl	8000ce8 <_sbrk>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_sbrk_r+0x1a>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_sbrk_r+0x1a>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	200062ac 	.word	0x200062ac

080062a4 <memcpy>:
 80062a4:	440a      	add	r2, r1
 80062a6:	4291      	cmp	r1, r2
 80062a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062ac:	d100      	bne.n	80062b0 <memcpy+0xc>
 80062ae:	4770      	bx	lr
 80062b0:	b510      	push	{r4, lr}
 80062b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ba:	4291      	cmp	r1, r2
 80062bc:	d1f9      	bne.n	80062b2 <memcpy+0xe>
 80062be:	bd10      	pop	{r4, pc}

080062c0 <_realloc_r>:
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	4607      	mov	r7, r0
 80062c6:	4614      	mov	r4, r2
 80062c8:	460d      	mov	r5, r1
 80062ca:	b921      	cbnz	r1, 80062d6 <_realloc_r+0x16>
 80062cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062d0:	4611      	mov	r1, r2
 80062d2:	f7ff bc4d 	b.w	8005b70 <_malloc_r>
 80062d6:	b92a      	cbnz	r2, 80062e4 <_realloc_r+0x24>
 80062d8:	f7ff fbde 	bl	8005a98 <_free_r>
 80062dc:	4625      	mov	r5, r4
 80062de:	4628      	mov	r0, r5
 80062e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e4:	f000 f81a 	bl	800631c <_malloc_usable_size_r>
 80062e8:	4284      	cmp	r4, r0
 80062ea:	4606      	mov	r6, r0
 80062ec:	d802      	bhi.n	80062f4 <_realloc_r+0x34>
 80062ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062f2:	d8f4      	bhi.n	80062de <_realloc_r+0x1e>
 80062f4:	4621      	mov	r1, r4
 80062f6:	4638      	mov	r0, r7
 80062f8:	f7ff fc3a 	bl	8005b70 <_malloc_r>
 80062fc:	4680      	mov	r8, r0
 80062fe:	b908      	cbnz	r0, 8006304 <_realloc_r+0x44>
 8006300:	4645      	mov	r5, r8
 8006302:	e7ec      	b.n	80062de <_realloc_r+0x1e>
 8006304:	42b4      	cmp	r4, r6
 8006306:	4622      	mov	r2, r4
 8006308:	4629      	mov	r1, r5
 800630a:	bf28      	it	cs
 800630c:	4632      	movcs	r2, r6
 800630e:	f7ff ffc9 	bl	80062a4 <memcpy>
 8006312:	4629      	mov	r1, r5
 8006314:	4638      	mov	r0, r7
 8006316:	f7ff fbbf 	bl	8005a98 <_free_r>
 800631a:	e7f1      	b.n	8006300 <_realloc_r+0x40>

0800631c <_malloc_usable_size_r>:
 800631c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006320:	1f18      	subs	r0, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	bfbc      	itt	lt
 8006326:	580b      	ldrlt	r3, [r1, r0]
 8006328:	18c0      	addlt	r0, r0, r3
 800632a:	4770      	bx	lr

0800632c <sqrtf>:
 800632c:	b508      	push	{r3, lr}
 800632e:	ed2d 8b02 	vpush	{d8}
 8006332:	eeb0 8a40 	vmov.f32	s16, s0
 8006336:	f000 f817 	bl	8006368 <__ieee754_sqrtf>
 800633a:	eeb4 8a48 	vcmp.f32	s16, s16
 800633e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006342:	d60c      	bvs.n	800635e <sqrtf+0x32>
 8006344:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006364 <sqrtf+0x38>
 8006348:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800634c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006350:	d505      	bpl.n	800635e <sqrtf+0x32>
 8006352:	f7ff fb75 	bl	8005a40 <__errno>
 8006356:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800635a:	2321      	movs	r3, #33	@ 0x21
 800635c:	6003      	str	r3, [r0, #0]
 800635e:	ecbd 8b02 	vpop	{d8}
 8006362:	bd08      	pop	{r3, pc}
 8006364:	00000000 	.word	0x00000000

08006368 <__ieee754_sqrtf>:
 8006368:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800636c:	4770      	bx	lr
	...

08006370 <_init>:
 8006370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006372:	bf00      	nop
 8006374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006376:	bc08      	pop	{r3}
 8006378:	469e      	mov	lr, r3
 800637a:	4770      	bx	lr

0800637c <_fini>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	bf00      	nop
 8006380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006382:	bc08      	pop	{r3}
 8006384:	469e      	mov	lr, r3
 8006386:	4770      	bx	lr
